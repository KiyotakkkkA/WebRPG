import React, { Fragment } from "react";
import { Dialog, Transition } from "@headlessui/react";
import { Location } from "../../../stores/LocationStore";

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
export interface Requirement {
    type: string;
    parameter: string;
    value: number | string;
    description: string;
    fulfilled: boolean;
    current_value?: number | string;
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
export const LocationRequirement: React.FC<{
    requirement: Requirement;
}> = ({ requirement }) => {
    // –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    const requirementIcons: Record<string, string> = {
        level: "‚≠ê",
        quest: "üìú",
        skill: "‚öîÔ∏è",
        gold: "üí∞",
        item: "üéí",
        attribute: "üí™",
        strength: "üí™",
        agility: "üèÉ",
        intelligence: "üß†",
        vitality: "‚ù§Ô∏è",
        luck: "üçÄ",
        charisma: "üëÑ",
        wisdom: "üìö",
        dexterity: "‚úã",
        constitution: "üõ°Ô∏è",
    };

    // –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    const getAttributeName = (attribute: string): string => {
        const attributeNames: Record<string, string> = {
            level: "–£—Ä–æ–≤–µ–Ω—å",
            quest: "–ö–≤–µ—Å—Ç",
            skill: "–ù–∞–≤—ã–∫",
            gold: "–ó–æ–ª–æ—Ç–æ",
            item: "–ü—Ä–µ–¥–º–µ—Ç",
            attribute: "–ê—Ç—Ä–∏–±—É—Ç",
            strength: "–°–∏–ª–∞",
            agility: "–õ–æ–≤–∫–æ—Å—Ç—å",
            intelligence: "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç",
            vitality: "–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å",
            luck: "–£–¥–∞—á–∞",
            charisma: "–•–∞—Ä–∏–∑–º–∞",
            wisdom: "–ú—É–¥—Ä–æ—Å—Ç—å",
            dexterity: "–ü—Ä–æ–≤–æ—Ä—Å—Ç–≤–æ",
            constitution: "–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ",
        };

        return attributeNames[attribute] || attribute;
    };

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    const getRequirementText = (): string => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if (requirement.description) {
            return requirement.description;
        }

        // –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        if (requirement.type === "attribute") {
            const attributeName = getAttributeName(requirement.parameter);
            return `${attributeName} ${requirement.value}`;
        } else {
            // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
            return `${getAttributeName(requirement.type)} ${requirement.value}`;
        }
    };

    return (
        <div
            className={`text-xs flex items-center ${
                requirement.fulfilled ? "text-green-400" : "text-red-400"
            }`}
        >
            <span className="mr-1">
                {requirementIcons[requirement.type] ||
                    requirementIcons[requirement.parameter] ||
                    "‚ùì"}
            </span>
            <span>{getRequirementText()}</span>
            {requirement.current_value !== undefined && (
                <span className="ml-1 font-medium">
                    ({requirement.current_value}/{requirement.value})
                </span>
            )}
        </div>
    );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
export const RequirementsList: React.FC<{
    requirements: Requirement[];
}> = ({ requirements }) => {
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
    const fulfilledRequirements = requirements.filter((req) => req.fulfilled);
    const unfulfilledRequirements = requirements.filter(
        (req) => !req.fulfilled
    );

    return (
        <div className="space-y-3">
            {unfulfilledRequirements.length > 0 && (
                <div>
                    <h4 className="text-xs text-red-400 font-semibold mb-1">
                        –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:
                    </h4>
                    <div className="space-y-1">
                        {unfulfilledRequirements.map((req, index) => (
                            <LocationRequirement
                                key={`unfulfilled-${index}`}
                                requirement={req}
                            />
                        ))}
                    </div>
                </div>
            )}

            {fulfilledRequirements.length > 0 && (
                <div>
                    <h4 className="text-xs text-green-400 font-semibold mb-1">
                        –í—ã–ø–æ–ª–Ω–µ–Ω—ã:
                    </h4>
                    <div className="space-y-1">
                        {fulfilledRequirements.map((req, index) => (
                            <LocationRequirement
                                key={`fulfilled-${index}`}
                                requirement={req}
                            />
                        ))}
                    </div>
                </div>
            )}
        </div>
    );
};

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –ª–æ–∫–∞—Ü–∏–∏
const LocationRequirementsModal: React.FC<{
    isOpen: boolean;
    onClose: () => void;
    location: Location | null;
}> = ({ isOpen, onClose, location }) => {
    if (!location) return null;

    return (
        <Transition appear show={isOpen} as={Fragment}>
            <Dialog as="div" className="relative z-50" onClose={onClose}>
                <Transition.Child
                    as={Fragment}
                    enter="ease-out duration-300"
                    enterFrom="opacity-0"
                    enterTo="opacity-100"
                    leave="ease-in duration-200"
                    leaveFrom="opacity-100"
                    leaveTo="opacity-0"
                >
                    <div className="fixed inset-0 bg-black bg-opacity-70" />
                </Transition.Child>

                <div className="fixed inset-0 overflow-y-auto">
                    <div className="flex min-h-full items-center justify-center p-4 text-center">
                        <Transition.Child
                            as={Fragment}
                            enter="ease-out duration-300"
                            enterFrom="opacity-0 scale-95"
                            enterTo="opacity-100 scale-100"
                            leave="ease-in duration-200"
                            leaveFrom="opacity-100 scale-100"
                            leaveTo="opacity-0 scale-95"
                        >
                            <Dialog.Panel className="w-full max-w-md transform overflow-hidden rounded-md border border-red-900/40 bg-gray-900 p-6 text-left align-middle shadow-xl transition-all">
                                <Dialog.Title
                                    as="h3"
                                    className="text-lg font-medieval text-red-500 text-center"
                                >
                                    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏{" "}
                                    <span className="text-red-400">
                                        {location.name}
                                    </span>
                                </Dialog.Title>

                                <div className="mt-4">
                                    {/* –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤ –ª–æ–∫–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö */}
                                    {location.requirements &&
                                    location.requirements.length > 0 ? (
                                        <RequirementsList
                                            requirements={location.requirements}
                                        />
                                    ) : // –ï—Å–ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –Ω–µ—Ç –≤ –ª–æ–∫–∞—Ü–∏–∏, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ –¥–æ—Å—Ç—É–ø–∞
                                    location.accessibility_issue ? (
                                        <div className="text-sm text-red-400">
                                            {
                                                location.accessibility_issue
                                                    .description
                                            }
                                        </div>
                                    ) : (
                                        <div className="text-sm text-gray-400">
                                            –£ —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ—Ç –æ—Å–æ–±—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
                                        </div>
                                    )}
                                </div>

                                <div className="mt-6 text-center">
                                    <button
                                        type="button"
                                        className="bg-red-900 hover:bg-red-800 text-white font-semibold py-2 px-6 rounded-md transition-colors duration-200"
                                        onClick={onClose}
                                    >
                                        –ó–∞–∫—Ä—ã—Ç—å
                                    </button>
                                </div>
                            </Dialog.Panel>
                        </Transition.Child>
                    </div>
                </div>
            </Dialog>
        </Transition>
    );
};

export default LocationRequirementsModal;
