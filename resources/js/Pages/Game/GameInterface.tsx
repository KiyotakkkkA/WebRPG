import React, { useEffect, useState, Fragment } from "react";
import { useNavigate } from "react-router-dom";
import { observer } from "mobx-react-lite";
import characterStore from "../../stores/CharacterStore";
import locationStore, {
    Location,
    LocationObject,
    LocationsLoadResult,
    LocationConnection,
} from "../../stores/LocationStore";
import journalStore, { JournalEntry } from "../../stores/JournalStore";
import Button from "../../Components/ui/Button";
import {
    objectTypeIcons,
    objectIconMap,
    actionIcons,
    ProfileIcon,
    ExploreIcon,
    LeaveIcon,
} from "../../Components/ui/GameIcons";
import NpcInteractionModal from "../../Components/game/NpcInteractionModal";
import CombatModal from "../../Components/game/CombatModal";
import LocationMap from "../../Components/game/LocationMap";
import { Dialog, Transition } from "@headlessui/react";
import { runInAction } from "mobx";
import TravelModal from "../../Components/game/TravelModal";

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Ä–∞–≥–∞
interface Enemy {
    id: string;
    name: string;
    image?: string;
    health: number;
    maxHealth: number;
    level: number;
    damage: number;
    defense: number;
    experience: number;
    gold: number;
    drops?: {
        id: string;
        name: string;
        chance: number;
    }[];
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ—Å—É—Ä—Å–Ω–æ–π –ø–æ–ª–æ—Å—ã (–∑–¥–æ—Ä–æ–≤—å–µ, –º–∞–Ω–∞, –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å)
const ResourceBar: React.FC<{
    current: number;
    max: number;
    color: string;
    label: string;
    className?: string;
}> = ({ current, max, color, label, className = "" }) => {
    const percentage = Math.floor((current / max) * 100);

    return (
        <div className={`flex items-center space-x-2 ${className}`}>
            <span className="text-xs text-gray-400 w-10">{label}:</span>
            <div className="flex-1 bg-gray-800 h-4 rounded-sm border border-gray-700 overflow-hidden">
                <div
                    className={`h-full rounded-sm ${color}`}
                    style={{ width: `${percentage}%` }}
                ></div>
            </div>
            <span className="text-xs text-gray-300 w-16 text-right">
                {current}/{max}
            </span>
        </div>
    );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
const GameObjectItem: React.FC<{
    object: LocationObject;
    onClick: (object: LocationObject) => void;
}> = ({ object, onClick }) => {
    const icon =
        objectIconMap[object.id as keyof typeof objectIconMap] ||
        objectTypeIcons[object.type as keyof typeof objectTypeIcons];

    return (
        <div
            className="flex items-center space-x-2 p-2 hover:bg-gray-800/60 rounded-md cursor-pointer border border-transparent hover:border-red-900/30 transition-colors"
            onClick={() => onClick(object)}
        >
            <span className="text-gray-400 w-6">
                {icon || <span className="text-xl">{object.icon}</span>}
            </span>
            <span className="text-sm text-gray-300">{object.name}</span>
        </div>
    );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ª–æ–∫–∞—Ü–∏–∏
const LocationRequirement: React.FC<{
    requirement: {
        type: string;
        parameter: string;
        value: number | string;
        description: string;
        fulfilled: boolean;
        current_value?: number | string;
    };
}> = ({ requirement }) => {
    // –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    const requirementIcons: Record<string, string> = {
        level: "‚≠ê",
        quest: "üìú",
        skill: "‚öîÔ∏è",
        gold: "üí∞",
        item: "üéí",
        attribute: "üí™",
    };

    return (
        <div
            className={`text-xs flex items-center ${
                requirement.fulfilled ? "text-green-400" : "text-red-400"
            }`}
        >
            <span className="mr-1">
                {requirementIcons[requirement.type] || "‚ùì"}
            </span>
            <span>{requirement.description}</span>
            {requirement.current_value !== undefined && (
                <span className="ml-1">
                    ({requirement.current_value}/{requirement.value})
                </span>
            )}
        </div>
    );
};

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –ª–æ–∫–∞—Ü–∏–∏
const LocationRequirementsModal: React.FC<{
    isOpen: boolean;
    onClose: () => void;
    location: Location | null;
}> = ({ isOpen, onClose, location }) => {
    if (!location) return null;

    return (
        <Transition appear show={isOpen} as={Fragment}>
            <Dialog as="div" className="relative z-50" onClose={onClose}>
                <Transition.Child
                    as={Fragment}
                    enter="ease-out duration-300"
                    enterFrom="opacity-0"
                    enterTo="opacity-100"
                    leave="ease-in duration-200"
                    leaveFrom="opacity-100"
                    leaveTo="opacity-0"
                >
                    <div className="fixed inset-0 bg-black bg-opacity-70" />
                </Transition.Child>

                <div className="fixed inset-0 overflow-y-auto">
                    <div className="flex min-h-full items-center justify-center p-4 text-center">
                        <Transition.Child
                            as={Fragment}
                            enter="ease-out duration-300"
                            enterFrom="opacity-0 scale-95"
                            enterTo="opacity-100 scale-100"
                            leave="ease-in duration-200"
                            leaveFrom="opacity-100 scale-100"
                            leaveTo="opacity-0 scale-95"
                        >
                            <Dialog.Panel className="w-full max-w-md transform overflow-hidden rounded-md bg-gray-900 border border-red-900/40 p-6 text-left align-middle shadow-xl transition-all">
                                <Dialog.Title
                                    as="h3"
                                    className="text-lg font-medieval text-red-500 text-center mb-4"
                                >
                                    –õ–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {location.name}
                                </Dialog.Title>
                                <div className="mt-2">
                                    <p className="text-sm text-gray-400 mb-4">
                                        –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                                        –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª–æ–≤–∏—è:
                                    </p>
                                    <div className="space-y-2 bg-gray-800/60 p-3 rounded-md border border-gray-700/60">
                                        {location.requirements &&
                                        location.requirements.length > 0 ? (
                                            location.requirements.map(
                                                (req, idx) => (
                                                    <LocationRequirement
                                                        key={idx}
                                                        requirement={req}
                                                    />
                                                )
                                            )
                                        ) : (
                                            <p className="text-xs text-gray-500">
                                                –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ
                                                —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö
                                            </p>
                                        )}
                                    </div>
                                </div>

                                <div className="mt-6 flex justify-center">
                                    <Button
                                        variant="secondary"
                                        size="sm"
                                        onClick={onClose}
                                    >
                                        –ü–æ–Ω—è—Ç–Ω–æ
                                    </Button>
                                </div>
                            </Dialog.Panel>
                        </Transition.Child>
                    </div>
                </div>
            </Dialog>
        </Transition>
    );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
const LocationItem: React.FC<{
    location: Location;
    onClick: (location: Location) => void;
    isActive: boolean;
    onShowRequirements: (location: Location) => void;
}> = ({ location, onClick, isActive, onShowRequirements }) => {
    return (
        <div
            className={`p-2 rounded-md cursor-pointer transition-colors ${
                isActive
                    ? "bg-red-900/30 border border-red-800/50"
                    : "hover:bg-gray-800/60 border border-transparent hover:border-red-900/30"
            }`}
            onClick={() => {
                if (location.is_accessible) {
                    onClick(location);
                } else {
                    onShowRequirements(location);
                }
            }}
        >
            <div className="flex items-center justify-between">
                <span
                    className={`text-sm ${
                        location.is_accessible
                            ? "text-red-400"
                            : "text-gray-500"
                    }`}
                >
                    {location.name}
                </span>
                {!location.is_accessible && (
                    <span className="text-xs text-red-500 ml-auto">‚ö†</span>
                )}
            </div>
        </div>
    );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –∂—É—Ä–Ω–∞–ª–µ
const JournalEntryItem: React.FC<{ entry: JournalEntry }> = ({ entry }) => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –∏ –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø–∏—Å–∏
    const getEntryStyle = (type: JournalEntry["type"]) => {
        switch (type) {
            case "location":
                return { color: "text-blue-400", icon: "‚û§" };
            case "item":
                return { color: "text-green-400", icon: "‚úì" };
            case "combat":
                return { color: "text-red-400", icon: "‚öîÔ∏è" };
            case "quest":
                return { color: "text-yellow-400", icon: "üìú" };
            case "error":
                return { color: "text-red-500", icon: "‚úó" };
            case "system":
            default:
                return { color: "text-gray-400", icon: "‚Ä¢" };
        }
    };

    const style = getEntryStyle(entry.type);
    const time = journalStore.formatEntryTime(entry.timestamp);

    return (
        <div className={`mb-1 ${style.color}`}>
            <span className="text-gray-600 mr-1">{style.icon}</span>
            <span className="text-gray-500 text-xs mr-1">[{time}]</span>
            {entry.text}
        </div>
    );
};

// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–≥—Ä–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const GameInterface: React.FC = observer(() => {
    const navigate = useNavigate();
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏
    const [activeLocation, setActiveLocation] = useState<Location | null>(null);

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ NPC
    const [isNpcModalOpen, setIsNpcModalOpen] = useState(false);
    const [selectedNpc, setSelectedNpc] = useState<LocationObject | null>(null);

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±–æ–µ–≤–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const [isCombatModalOpen, setIsCombatModalOpen] = useState(false);
    const [currentEnemy, setCurrentEnemy] = useState<Enemy | null>(null);

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –ª–æ–∫–∞—Ü–∏–∏
    const [isRequirementsModalOpen, setIsRequirementsModalOpen] =
        useState(false);
    const [selectedLocation, setSelectedLocation] = useState<Location | null>(
        null
    );

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è
    const [isTravelModalOpen, setIsTravelModalOpen] = useState(false);
    const [selectedTargetLocation, setSelectedTargetLocation] =
        useState<Location | null>(null);
    const [travelTime, setTravelTime] = useState(0);
    const [baseTravelTime, setBaseTravelTime] = useState(0);
    const [savedTime, setSavedTime] = useState(0);
    const [isLocationPreloaded, setIsLocationPreloaded] = useState(false);

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –º–µ–∂–¥—É –ª–æ–∫–∞—Ü–∏—è–º–∏
    const [locationConnections, setLocationConnections] = useState<
        LocationConnection[]
    >([]);

    // –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤—Ä–∞–≥–æ–≤ –¥–ª—è –ª–æ–∫–∞—Ü–∏–π
    const locationEnemies: Record<string, Enemy[]> = {
        1: [], // –í –ª–∞–≥–µ—Ä–µ –Ω–µ—Ç –≤—Ä–∞–≥–æ–≤
        2: [
            {
                id: "wounded-wolf",
                name: "–†–∞–Ω–µ–Ω—ã–π —Ç–µ–Ω–µ–≤–æ–π –≤–æ–ª–∫",
                health: 50,
                maxHealth: 50,
                level: 2,
                damage: 8,
                defense: 3,
                experience: 35,
                gold: 5,
                drops: [
                    {
                        id: "wolf-fang",
                        name: "–ö–ª—ã–∫ —Ç–µ–Ω–µ–≤–æ–≥–æ –≤–æ–ª–∫–∞",
                        chance: 0.7,
                    },
                    {
                        id: "shadow-essence",
                        name: "–≠—Å—Å–µ–Ω—Ü–∏—è —Ç–µ–Ω–∏",
                        chance: 0.3,
                    },
                ],
            },
            {
                id: "corrupted-tree",
                name: "–û—Å–∫–≤–µ—Ä–Ω–µ–Ω–Ω–æ–µ –¥—Ä–µ–≤–æ",
                health: 80,
                maxHealth: 80,
                level: 3,
                damage: 5,
                defense: 8,
                experience: 45,
                gold: 3,
                drops: [
                    { id: "dark-bark", name: "–¢–µ–º–Ω–∞—è –∫–æ—Ä–∞", chance: 0.8 },
                    {
                        id: "corrupted-sap",
                        name: "–û—Å–∫–≤–µ—Ä–Ω–µ–Ω–Ω—ã–π —Å–æ–∫",
                        chance: 0.4,
                    },
                ],
            },
        ],
        3: [
            {
                id: "skeleton-warrior",
                name: "–°–∫–µ–ª–µ—Ç-–≤–æ–∏–Ω",
                health: 60,
                maxHealth: 60,
                level: 4,
                damage: 10,
                defense: 5,
                experience: 50,
                gold: 8,
                drops: [
                    {
                        id: "rusted-sword",
                        name: "–ü—Ä–æ—Ä–∂–∞–≤–µ–≤—à–∏–π –º–µ—á",
                        chance: 0.6,
                    },
                    { id: "bone-dust", name: "–ö–æ—Å—Ç–Ω–∞—è –ø—ã–ª—å", chance: 0.5 },
                ],
            },
        ],
        4: [
            {
                id: "dark-mage",
                name: "–¢–µ–º–Ω—ã–π –º–∞–≥",
                health: 70,
                maxHealth: 70,
                level: 5,
                damage: 12,
                defense: 4,
                experience: 70,
                gold: 15,
                drops: [
                    {
                        id: "dark-crystal",
                        name: "–¢–µ–º–Ω—ã–π –∫—Ä–∏—Å—Ç–∞–ª–ª",
                        chance: 0.5,
                    },
                    {
                        id: "spell-scroll",
                        name: "–°–≤–∏—Ç–æ–∫ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è",
                        chance: 0.4,
                    },
                    { id: "mage-robe", name: "–ú–∞–Ω—Ç–∏—è –º–∞–≥–∞", chance: 0.2 },
                ],
            },
        ],
    };

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–≥—Ä–æ–∫–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
    useEffect(() => {
        const loadGame = async () => {
            setLoading(true);
            setError(null);

            // –®–∞–≥ 1: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
            if (!characterStore.selectedCharacter) {
                try {
                    await characterStore.loadCharacters();

                    if (characterStore.characters.length > 0) {
                        await characterStore.loadCharacter(
                            characterStore.characters[0].id
                        );

                        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                        journalStore.addEntry(
                            "–ü–µ—Ä—Å–æ–Ω–∞–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω",
                            "system"
                        );
                    } else {
                        setError(
                            "–£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É."
                        );
                        setLoading(false);
                        return;
                    }
                } catch (err) {
                    journalStore.addEntry(
                        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
                        "error"
                    );
                    setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞");
                    setLoading(false);
                    return;
                }
            }

            // –®–∞–≥ 2: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
            if (characterStore.selectedCharacter) {
                try {
                    const result = await locationStore.loadAvailableLocations(
                        characterStore.selectedCharacter.id
                    );

                    console.log("–î–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞:", result);

                    if (result) {
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–≤–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞
                        setActiveLocation(
                            result.currentLocation as Location | null
                        );

                        // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏, –Ω–æ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é
                        if (
                            !result.currentLocation &&
                            locationStore.availableLocations.length > 0
                        ) {
                            setActiveLocation(
                                locationStore.availableLocations[0]
                            );
                        }

                        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª –æ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏
                        if (result.currentLocation) {
                            journalStore.addEntry(
                                `–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ª–æ–∫–∞—Ü–∏–∏ ${result.currentLocation.name}`,
                                "location"
                            );
                        }

                        // –®–∞–≥ 3: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –º–µ–∂–¥—É –ª–æ–∫–∞—Ü–∏—è–º–∏
                        try {
                            console.log(
                                "–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –º–µ–∂–¥—É –ª–æ–∫–∞—Ü–∏—è–º–∏..."
                            );
                            const connections =
                                await locationStore.loadLocationConnections();
                            console.log(
                                "–°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞:",
                                connections
                            );

                            if (connections && connections.length > 0) {
                                console.log(
                                    `–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${connections.length} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π`
                                );
                                setLocationConnections(connections);
                            } else {
                                console.error(
                                    "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç!"
                                );
                                journalStore.addEntry(
                                    "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è—Ö –º–µ–∂–¥—É –ª–æ–∫–∞—Ü–∏—è–º–∏",
                                    "error"
                                );
                            }
                        } catch (error) {
                            console.error(
                                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:",
                                error
                            );
                            journalStore.addEntry(
                                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –º–µ–∂–¥—É –ª–æ–∫–∞—Ü–∏—è–º–∏",
                                "error"
                            );
                        }

                        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –ª–æ–∫–∞—Ü–∏–π –Ω–µ—Ç –∏–ª–∏ –Ω–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
                        if (
                            locationStore.availableLocations.length === 0 ||
                            !locationStore.availableLocations.some(
                                (loc) =>
                                    loc.requirements &&
                                    loc.requirements.length > 0
                            )
                        ) {
                            console.log(
                                "–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–∫–∞—Ü–∏–π"
                            );

                            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                            const demoLocations: Location[] = [
                                {
                                    id: 1,
                                    name: "–õ–∞–≥–µ—Ä—å –≤—ã–∂–∏–≤—à–∏—Ö",
                                    description:
                                        "–ó–∞—â–∏—â–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è —Ç–µ, –∫—Ç–æ —Å–º–æ–≥ –ø–µ—Ä–µ–∂–∏—Ç—å –ø–µ—Ä–≤—ã–µ –¥–Ω–∏ –ø—Ä–æ–∫–ª—è—Ç–∏—è.",
                                    image_url:
                                        "/images/locations/novice-camp.jpg",
                                    danger_level: 1,
                                    is_default: true,
                                    is_discoverable: true,
                                    position_x: 0,
                                    position_y: 0,
                                    is_accessible: true,
                                    is_current: true,
                                    objects: [
                                        {
                                            id: "merchant",
                                            name: "–¢–æ—Ä–≥–æ–≤–µ—Ü –ú–∞–ª–≤–µ—Ä",
                                            icon: "üë®‚Äçü¶≥",
                                            type: "npc",
                                            description:
                                                "–ó–∞–≥–∞–¥–æ—á–Ω—ã–π —Ç–æ—Ä–≥–æ–≤–µ—Ü —Å —Ä–µ–¥–∫–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ —Å—Ç—Ä–∞–Ω–Ω–æ–π —É–ª—ã–±–∫–æ–π.",
                                        },
                                        {
                                            id: "quest-giver",
                                            name: "–°—Ç–∞—Ä–µ–π—à–∏–Ω–∞ –ò—Ä–º–µ–ª—å",
                                            icon: "üëµ",
                                            type: "npc",
                                            description:
                                                "–•—Ä–∞–Ω–∏—Ç–µ–ª—å–Ω–∏—Ü–∞ –∑–Ω–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä–∞—è –¥–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –æ—Ç–≤–∞–∂–Ω—ã–º –∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç–∞–º.",
                                        },
                                    ],
                                },
                                {
                                    id: 2,
                                    name: "–õ–µ—Å–∞ –¢–µ–Ω–µ–π",
                                    description:
                                        "–î—Ä–µ–≤–Ω–∏–µ –ª–µ—Å–∞, –≥–¥–µ –¥–µ—Ä–µ–≤—å—è —à–µ–ø—á—É—Ç —Ç–∞–π–Ω—ã –ø—Ä–æ—à–ª–æ–≥–æ –∏ —Å–∫—Ä—ã–≤–∞—é—Ç –º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
                                    image_url:
                                        "/images/locations/shadow-woods.jpg",
                                    danger_level: 3,
                                    is_default: false,
                                    is_discoverable: true,
                                    position_x: 1,
                                    position_y: 1,
                                    is_accessible: true,
                                    is_current: false,
                                    objects: [
                                        {
                                            id: "wounded-wolf",
                                            name: "–†–∞–Ω–µ–Ω—ã–π —Ç–µ–Ω–µ–≤–æ–π –≤–æ–ª–∫",
                                            icon: "üê∫",
                                            type: "monster",
                                            description:
                                                "–û–ø–∞—Å–Ω–æ–µ —Å—É—â–µ—Å—Ç–≤–æ, –æ—Å–ª–∞–±–ª–µ–Ω–Ω–æ–µ —Ä–∞–Ω–∞–º–∏. –•–æ—Ä–æ—à–∞—è –¥–æ–±—ã—á–∞ –¥–ª—è –Ω–æ–≤–∏—á–∫–∞.",
                                        },
                                    ],
                                },
                                {
                                    id: 3,
                                    name: "–ó–∞–±—ã—Ç—ã–µ —Ä—É–∏–Ω—ã",
                                    description:
                                        "–û—Å—Ç–∞–Ω–∫–∏ –¥—Ä–µ–≤–Ω–µ–π —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏, –ø–æ–ª–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –∏ —Å–º–µ—Ä—Ç–µ–ª—å–Ω—ã—Ö –ª–æ–≤—É—à–µ–∫.",
                                    image_url:
                                        "/images/locations/forgotten-ruins.jpg",
                                    danger_level: 5,
                                    is_default: false,
                                    is_discoverable: true,
                                    position_x: 2,
                                    position_y: 0,
                                    is_accessible: false,
                                    is_current: false,
                                    requirements: [
                                        {
                                            type: "level",
                                            parameter: "",
                                            value: 3,
                                            description:
                                                "–¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 3 —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ó–∞–±—ã—Ç—ã–µ —Ä—É–∏–Ω—ã",
                                            fulfilled: false,
                                            current_value: 1,
                                        },
                                    ],
                                },
                                {
                                    id: 4,
                                    name: "–ö—Ä–æ–≤–∞–≤—ã–µ –∫–æ–ø–∏",
                                    description:
                                        "–ó–∞–±—Ä–æ—à–µ–Ω–Ω—ã–µ —à–∞—Ö—Ç—ã, –≥–¥–µ –¥–æ–±—ã–≤–∞–ª–∏ —Ä–µ–¥–∫–∏–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã. –¢–µ–ø–µ—Ä—å —Ç–∞–º –æ–±–∏—Ç–∞—é—Ç —Å—É—â–µ—Å—Ç–≤–∞ –∏–∑ –±–µ–∑–¥–Ω—ã.",
                                    image_url:
                                        "/images/locations/blood-mines.jpg",
                                    danger_level: 7,
                                    is_default: false,
                                    is_discoverable: true,
                                    position_x: 0,
                                    position_y: 2,
                                    is_accessible: false,
                                    is_current: false,
                                    requirements: [
                                        {
                                            type: "level",
                                            parameter: "",
                                            value: 5,
                                            description:
                                                "–¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 5 —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ö—Ä–æ–≤–∞–≤—ã–µ –∫–æ–ø–∏",
                                            fulfilled: false,
                                            current_value: 1,
                                        },
                                        {
                                            type: "attribute",
                                            parameter: "strength",
                                            value: 6,
                                            description:
                                                "–¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 6 —Å–∏–ª—ã –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç—è–∂–µ–ª–æ–π –¥–≤–µ—Ä–∏ –≤ –ö—Ä–æ–≤–∞–≤—ã–µ –∫–æ–ø–∏",
                                            fulfilled: false,
                                            current_value: 5,
                                        },
                                    ],
                                },
                            ];

                            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                            runInAction(() => {
                                locationStore.availableLocations =
                                    demoLocations;
                                locationStore.currentLocation =
                                    demoLocations[0];
                            });

                            setActiveLocation(demoLocations[0]);
                        }

                        console.log(
                            "–õ–æ–∫–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
                            locationStore.availableLocations
                        );
                        console.log("–ê–∫—Ç–∏–≤–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è:", activeLocation);
                    } else {
                        setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞—Ü–∏—è—Ö");
                    }
                } catch (err) {
                    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–∫–∞—Ü–∏–π:", err);
                    setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–∫–∞—Ü–∏–π");
                }
            }

            setLoading(false);
        };

        loadGame();
    }, []);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏
    const handleLocationSelect = async (location: Location) => {
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏ —Ç–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        if (
            !characterStore.selectedCharacter ||
            !locationStore.currentLocation
        ) {
            console.error(
                "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è: –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–ª–∏ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏"
            );
            return;
        }

        // –î–æ–±–∞–≤–∏–º –±–æ–ª—å—à–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        console.log(`–í—ã–±—Ä–∞–Ω–∞ –ª–æ–∫–∞—Ü–∏—è: ${location.name} (ID: ${location.id})`);

        // –ï—Å–ª–∏ –ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–∫–∞–∂–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
        if (!location.is_accessible) {
            console.log("–õ–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è");
            setSelectedLocation(location);
            setIsRequirementsModalOpen(true);
            return;
        }

        // –ï—Å–ª–∏ –ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–∑ —Ç–µ–∫—É—â–µ–π, –ø–æ–∫–∞–∂–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if (!location.is_accessible_from_current) {
            console.log("–õ–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–∑ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏");
            return;
        }

        // –ü–æ–∏—Å–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –º–µ–∂–¥—É –ª–æ–∫–∞—Ü–∏—è–º–∏
        console.log("–ü–æ–∏—Å–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –º–µ–∂–¥—É —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–µ–π –∏ —Ü–µ–ª–µ–≤–æ–π");
        const connections = locationConnections;
        console.log("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:", connections);

        if (connections.length === 0) {
            console.warn("–ú–∞—Å—Å–∏–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø—É—Å—Ç! –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...");
            try {
                const loadedConnections =
                    await locationStore.loadLocationConnections();
                console.log("–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:", loadedConnections);
                if (loadedConnections.length > 0) {
                    setLocationConnections(loadedConnections);
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –Ω–æ–≤—ã–º–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
                    const newConnection = loadedConnections.find(
                        (conn) =>
                            (conn.from_location_id ===
                                locationStore.currentLocation?.id &&
                                conn.to_location_id === location.id) ||
                            (conn.is_bidirectional &&
                                conn.from_location_id === location.id &&
                                conn.to_location_id ===
                                    locationStore.currentLocation?.id)
                    );

                    if (newConnection) {
                        console.log(
                            "–ù–∞–π–¥–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏:",
                            newConnection
                        );
                        // –ü–æ–ª—É—á–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                        const characterSpeed =
                            characterStore.selectedCharacter.speed || 10;
                        console.log(`–°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: ${characterSpeed}`);

                        // –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∏–∑ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                        let baseTravelTime = newConnection.travel_time;
                        console.log(
                            `–ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: ${baseTravelTime} —Å–µ–∫—É–Ω–¥`
                        );

                        // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                        // –ù–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞: max(3, time - time*(1 - speed/100))
                        const speedModifier = characterSpeed / 100;
                        let calculatedTime = Math.round(
                            baseTravelTime -
                                baseTravelTime * (1 - speedModifier)
                        );
                        console.log(
                            `–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —Å–∫–æ—Ä–æ—Å—Ç–∏: ${calculatedTime} —Å–µ–∫—É–Ω–¥`
                        );

                        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è - 3 —Å–µ–∫—É–Ω–¥—ã
                        const finalTravelTime = Math.max(3, calculatedTime);

                        // –†–∞—Å—á–µ—Ç —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                        const savedTime = baseTravelTime - finalTravelTime;
                        console.log(`–°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: ${savedTime} —Å–µ–∫—É–Ω–¥`);

                        setIsLocationPreloaded(false);
                        setSelectedTargetLocation(location);
                        setTravelTime(finalTravelTime);
                        setBaseTravelTime(baseTravelTime);
                        setSavedTime(savedTime);
                        setIsTravelModalOpen(true);

                        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
                        try {
                            const response =
                                await locationStore.getLocationDetails(
                                    location.id,
                                    characterStore.selectedCharacter.id
                                );
                            setIsLocationPreloaded(true);
                        } catch (error) {
                            console.error(
                                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–∏:",
                                error
                            );
                        }
                        return;
                    }
                }
            } catch (error) {
                console.error(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:",
                    error
                );
            }
        }

        // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        const connection = connections.find(
            (conn) =>
                (conn.from_location_id === locationStore.currentLocation?.id &&
                    conn.to_location_id === location.id) ||
                (conn.is_bidirectional &&
                    conn.from_location_id === location.id &&
                    conn.to_location_id === locationStore.currentLocation?.id)
        );

        if (!connection) {
            console.warn(
                `–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É –ª–æ–∫–∞—Ü–∏—è–º–∏ ${locationStore.currentLocation?.id} –∏ ${location.id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`,
                "–ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10 —Å–µ–∫—É–Ω–¥."
            );
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        const characterSpeed = characterStore.selectedCharacter.speed || 10;
        console.log(`–°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: ${characterSpeed}`);

        // –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∏–∑ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        let baseTravelTime = connection ? connection.travel_time : 10;
        console.log(`–ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: ${baseTravelTime} —Å–µ–∫—É–Ω–¥`);

        // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        // –ù–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞: max(3, time - time*(1 - speed/100))
        const speedModifier = characterSpeed / 100;
        let calculatedTime = Math.round(
            baseTravelTime - baseTravelTime * speedModifier
        );
        console.log(
            `–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —Å–∫–æ—Ä–æ—Å—Ç–∏: ${calculatedTime} —Å–µ–∫—É–Ω–¥`
        );

        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è - 3 —Å–µ–∫—É–Ω–¥—ã
        const finalTravelTime = Math.max(3, calculatedTime);

        // –†–∞—Å—á–µ—Ç —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        const savedTime = baseTravelTime - finalTravelTime;
        console.log(`–°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: ${savedTime} —Å–µ–∫—É–Ω–¥`);

        // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –ª–æ–∫–∞—Ü–∏–∏
        setIsLocationPreloaded(false);
        setSelectedTargetLocation(location);
        setTravelTime(finalTravelTime);
        setBaseTravelTime(baseTravelTime);
        setSavedTime(savedTime);
        setIsTravelModalOpen(true);

        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
        console.log("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–∏");
        try {
            const response = await locationStore.getLocationDetails(
                location.id,
                characterStore.selectedCharacter.id
            );
            console.log("–î–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω—ã:", response);
            setIsLocationPreloaded(true);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–∏:", error);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    const completeTravelToLocation = async () => {
        if (!characterStore.selectedCharacter || !selectedTargetLocation) {
            setIsTravelModalOpen(false);
            return;
        }

        try {
            setLoading(true);
            console.log(
                `–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤ –ª–æ–∫–∞—Ü–∏—é: ${selectedTargetLocation.name} (ID: ${selectedTargetLocation.id})`
            );

            const result = await locationStore.moveToLocation(
                characterStore.selectedCharacter.id,
                selectedTargetLocation.id
            );

            if (result.success) {
                console.log(
                    `–£—Å–ø–µ—à–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –ª–æ–∫–∞—Ü–∏—é: ${selectedTargetLocation.name}`
                );

                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –≤ –∂—É—Ä–Ω–∞–ª
                journalStore.addEntry(
                    `–í—ã –ø—Ä–∏–±—ã–ª–∏ –≤ –ª–æ–∫–∞—Ü–∏—é ${selectedTargetLocation.name}`,
                    "location"
                );

                setActiveLocation(result.location as Location | null);
            } else {
                console.error(
                    `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –≤ –ª–æ–∫–∞—Ü–∏—é: ${result.error}`,
                    result.debug
                );

                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ—à–∏–±–∫–µ
                journalStore.addEntry(
                    `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ –ª–æ–∫–∞—Ü–∏—é ${selectedTargetLocation.name}: ${result.error}`,
                    "error"
                );

                setError(
                    result.error ||
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é"
                );
            }
        } catch (err) {
            console.error("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –≤ –ª–æ–∫–∞—Ü–∏—é:", err);
            journalStore.addEntry(
                `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –≤ –ª–æ–∫–∞—Ü–∏—é`,
                "error"
            );
            setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –≤ –ª–æ–∫–∞—Ü–∏—é");
        } finally {
            setSelectedTargetLocation(null);
            setIsTravelModalOpen(false);
            setLoading(false);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è
    const cancelTravel = () => {
        setSelectedTargetLocation(null);
        setIsTravelModalOpen(false);
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞
    const handleObjectSelect = (object: LocationObject) => {
        if (object.type === "npc") {
            journalStore.addEntry(`–í—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ ${object.name}`, "location");
            setSelectedNpc(object);
            setIsNpcModalOpen(true);
        } else if (object.type === "monster") {
            // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ–π –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–Ω—Å—Ç—Ä–∞
            if (activeLocation) {
                const locationId = activeLocation.id.toString();
                const enemies = locationEnemies[locationId];

                if (enemies) {
                    const enemy = enemies.find((e) => e.id === object.id);
                    if (enemy) {
                        journalStore.addEntry(
                            `–í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –±–æ–π —Å ${object.name}`,
                            "combat"
                        );
                        setCurrentEnemy(enemy);
                        setIsCombatModalOpen(true);
                    }
                }
            }
        } else {
            journalStore.addEntry(`–í—ã –∏—Å—Å–ª–µ–¥—É–µ—Ç–µ ${object.name}`, "location");
            console.log(`–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–±—ä–µ–∫—Ç–æ–º: ${object.name}`);
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
    const handleExplore = () => {
        if (!activeLocation) return;

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–∞—á–∞–ª–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        journalStore.addEntry(
            `–í—ã –∏—Å—Å–ª–µ–¥—É–µ—Ç–µ –ª–æ–∫–∞—Ü–∏—é ${activeLocation.name}`,
            "location"
        );

        // –®–∞–Ω—Å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å –≤—Ä–∞–≥–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ª–æ–∫–∞—Ü–∏–∏
        const encounterChance = activeLocation.danger_level * 0.1; // 0.1 - 0.5 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (1-5)

        // –®–∞–Ω—Å –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç
        const itemChance = 0.35;

        // –®–∞–Ω—Å –Ω–∞–π—Ç–∏ —Ä–µ—Å—É—Ä—Å
        const resourceChance = 0.25;

        // –®–∞–Ω—Å –Ω–∞–π—Ç–∏ –æ—Å–æ–±–æ–µ –º–µ—Å—Ç–æ
        const specialPlaceChance = 0.15;

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        const roll = Math.random();

        if (roll < encounterChance) {
            // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—Ä–∞–≥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
            const locationId = activeLocation.id.toString();
            const enemies = locationEnemies[locationId] || [];

            if (enemies.length > 0) {
                const randomEnemy =
                    enemies[Math.floor(Math.random() * enemies.length)];
                journalStore.addEntry(
                    `–í—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å ${randomEnemy.name}!`,
                    "combat"
                );
                setCurrentEnemy(randomEnemy);
                setIsCombatModalOpen(true);
            } else {
                // –ù–µ—Ç –≤—Ä–∞–≥–æ–≤ –≤ —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏ - –Ω–∞—Ö–æ–¥–∏–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
                handleFindRandomItem();
            }
        } else if (roll < encounterChance + itemChance) {
            // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–º–µ—Ç
            handleFindRandomItem();
        } else if (roll < encounterChance + itemChance + resourceChance) {
            // –ù–∞—Ö–æ–¥–∏–º —Ä–µ—Å—É—Ä—Å
            const resources = [
                "–ñ–µ–ª–µ–∑–Ω–∞—è —Ä—É–¥–∞",
                "–°—Ç–∞—Ä–∞—è –¥—Ä–µ–≤–µ—Å–∏–Ω–∞",
                "–õ–µ—á–µ–±–Ω–∞—è —Ç—Ä–∞–≤–∞",
                "–ö—Ä–∏—Å—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π –æ—Å–∫–æ–ª–æ–∫",
                "–¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≥—Ä–∏–±",
                "–ö–æ–∂–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ",
            ];
            const randomResource =
                resources[Math.floor(Math.random() * resources.length)];
            journalStore.addEntry(
                `–í—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ —Ä–µ—Å—É—Ä—Å: ${randomResource}`,
                "item"
            );
        } else if (
            roll <
            encounterChance + itemChance + resourceChance + specialPlaceChance
        ) {
            // –ù–∞—Ö–æ–¥–∏–º –æ—Å–æ–±–æ–µ –º–µ—Å—Ç–æ
            const places = [
                "–¥—Ä–µ–≤–Ω–∏–π –∞–ª—Ç–∞—Ä—å",
                "–∑–∞–±—Ä–æ—à–µ–Ω–Ω—ã–π –ª–∞–≥–µ—Ä—å",
                "—Ç–∞–π–Ω–∏–∫ –∫–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–∏—Å—Ç–æ–≤",
                "–Ω–µ–±–æ–ª—å—à—É—é –ø–µ—â–µ—Ä—É",
                "—Ä–∞–∑—Ä—É—à–µ–Ω–Ω—É—é –±–∞—à–Ω—é",
                "—Å—Ç—Ä–∞–Ω–Ω—ã–π –º–æ–Ω–æ–ª–∏—Ç",
            ];
            const randomPlace =
                places[Math.floor(Math.random() * places.length)];
            journalStore.addEntry(`–í—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ ${randomPlace}`, "location");
        } else {
            // –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—Ö–æ–¥–∏–º
            const messages = [
                "–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ –≤ —ç—Ç–æ–π —á–∞—Å—Ç–∏ –ª–æ–∫–∞—Ü–∏–∏",
                "–ó–¥–µ—Å—å –Ω–µ—Ç –Ω–∏—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ",
                "–í–∞—à–∏ –ø–æ–∏—Å–∫–∏ –Ω–µ —É–≤–µ–Ω—á–∞–ª–∏—Å—å —É—Å–ø–µ—Ö–æ–º",
                "–≠—Ç–∞ –æ–±–ª–∞—Å—Ç—å –∫–∞–∂–µ—Ç—Å—è –ø—É—Å—Ç–æ–π",
                "–í—ã –æ—Å–º–æ—Ç—Ä–µ–ª–∏—Å—å –≤–æ–∫—Ä—É–≥, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏",
            ];
            const randomMessage =
                messages[Math.floor(Math.random() * messages.length)];
            journalStore.addEntry(randomMessage, "system");
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π –Ω–∞—Ö–æ–¥–∫–∏
    const handleFindRandomItem = () => {
        const items = [
            "–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è",
            "–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –º–∞–Ω—ã",
            "–ö—É—Å–æ–∫ —Ö–ª–µ–±–∞",
            "–ú–æ–Ω–µ—Ç–∞",
            "–ö—É—Å–æ–∫ —Ç–∫–∞–Ω–∏",
            "–û—Å–∫–æ–ª–æ–∫ –º–µ—Ç–∞–ª–ª–∞",
            "–°—Ç—Ä–∞–Ω–Ω—ã–π –∫—Ä–∏—Å—Ç–∞–ª–ª",
            "–°—Ç–∞—Ä–∞—è –∫–∞—Ä—Ç–∞",
        ];
        const randomItem = items[Math.floor(Math.random() * items.length)];

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª –æ –Ω–∞—Ö–æ–¥–∫–µ
        journalStore.addEntry(`–í—ã –Ω–∞—à–ª–∏ –ø—Ä–µ–¥–º–µ—Ç: ${randomItem}`, "item");

        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        alert(`–í—ã –Ω–∞—à–ª–∏: ${randomItem}`);
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –ø–æ—Å–ª–µ –±–æ—è
    const handleCombatVictory = (rewards: {
        experience: number;
        gold: number;
        items: string[];
    }) => {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —É—á–µ—Ç–æ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
        console.log("–ù–∞–≥—Ä–∞–¥—ã –ø–æ–ª—É—á–µ–Ω—ã:", rewards);
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –≤ –±–æ—é
    const handleCombatDefeat = () => {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        console.log("–ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ—Ç–µ—Ä–ø–µ–ª –ø–æ—Ä–∞–∂–µ–Ω–∏–µ");
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ª–æ–∫–∞—Ü–∏–∏
    const handleShowLocationRequirements = (location: Location) => {
        setSelectedLocation(location);
        setIsRequirementsModalOpen(true);
    };

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    if (loading) {
        return (
            <div className="fixed inset-0 bg-black flex items-center justify-center">
                <div className="flex flex-col items-center">
                    <div className="relative">
                        <div className="h-16 w-16 animate-spin rounded-full border-t-4 border-red-600"></div>
                        <div className="absolute inset-0 flex items-center justify-center">
                            <div className="h-10 w-10 rounded-full bg-black"></div>
                        </div>
                    </div>
                    <p className="mt-4 text-xl font-medieval text-red-600">
                        –ó–∞–≥—Ä—É–∑–∫–∞ –º–∏—Ä–∞...
                    </p>
                </div>
            </div>
        );
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—à–∏–±–∫—É
    if (error || !characterStore.selectedCharacter) {
        return (
            <div className="fixed inset-0 bg-black flex items-center justify-center">
                <div className="max-w-md p-6 bg-gray-900 border border-red-900/40 rounded-lg shadow-xl">
                    <h2 className="text-xl text-red-500 mb-4">–û—à–∏–±–∫–∞</h2>
                    <p className="text-gray-400 mb-6">
                        {error ||
                            "–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."}
                    </p>
                    <div className="flex justify-center">
                        <Button variant="primary" onClick={() => navigate("/")}>
                            <span className="mr-2">üè∞</span> –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞
                            –≥–ª–∞–≤–Ω—É—é
                        </Button>
                    </div>
                </div>
            </div>
        );
    }

    const character = characterStore.selectedCharacter;

    return (
        <div className="fixed inset-0 bg-gray-900 flex flex-col overflow-hidden">
            {/* –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ */}
            <div className="h-24 bg-gradient-to-r from-gray-900 via-gray-800 to-gray-900 border-b border-red-900/60 flex items-center px-6 py-3 justify-between shadow-lg">
                {/* –ê–≤–∞—Ç–∞—Ä –∏ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ */}
                <div className="flex items-center bg-gray-900/60 p-2 rounded-lg border border-red-900/40 shadow-md">
                    <div className="relative mr-3">
                        <div className="w-12 h-12 rounded-full overflow-hidden border-2 border-red-800 shadow-lg">
                            <img
                                src={`/images/classes/${character.class}.jpg`}
                                alt={character.class}
                                className="w-full h-full object-cover"
                                onError={(e) => {
                                    (e.target as HTMLImageElement).src =
                                        "/images/fallback-hero.jpg";
                                }}
                            />
                        </div>
                        <div className="absolute -bottom-1 -right-1 bg-red-900 text-xs text-white px-1 rounded-sm border border-red-700 shadow">
                            {character.level}
                        </div>
                    </div>

                    <div>
                        <div className="text-sm text-red-400 font-medieval">
                            {character.name}
                        </div>
                        <div className="text-xs text-gray-500">
                            {activeLocation?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ"}
                        </div>
                    </div>
                </div>

                {/* –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤ (–∑–¥–æ—Ä–æ–≤—å–µ, –º–∞–Ω–∞, –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å) */}
                <div className="flex-1 max-w-md mx-6 space-y-1 bg-gray-900/60 p-3 rounded-lg border border-red-900/40 shadow-md">
                    <ResourceBar
                        current={character.health}
                        max={character.max_health}
                        color="bg-gradient-to-r from-red-800 to-red-600"
                        label="–ó–î–†"
                    />
                    <ResourceBar
                        current={character.mana}
                        max={character.max_mana}
                        color="bg-gradient-to-r from-blue-800 to-blue-600"
                        label="–ú–ê–ù"
                    />
                    <ResourceBar
                        current={character.stamina}
                        max={character.max_stamina}
                        color="bg-gradient-to-r from-green-800 to-green-600"
                        label="–í–´–ù"
                    />
                </div>

                {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (—Å–∫–æ—Ä–æ—Å—Ç—å, –æ–ø—ã—Ç) */}
                <div className="w-48 mx-4 space-y-2">
                    {/* –ë–ª–æ–∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ */}
                    <div
                        className="bg-gray-900/60 px-3 py-1 rounded text-xs text-gray-300 border border-gray-700 flex items-center justify-between shadow-md"
                        title="–°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ –≤—Ä–µ–º—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –º–µ–∂–¥—É –ª–æ–∫–∞—Ü–∏—è–º–∏"
                    >
                        <span className="flex items-center">
                            <span className="text-lime-500 mr-2">üèÉ</span>{" "}
                            –°–∫–æ—Ä–æ—Å—Ç—å
                        </span>
                        <span className="text-lime-400 font-bold">
                            {character.speed}
                        </span>
                    </div>

                    {/* –ü–æ–ª–æ—Å–∞ –æ–ø—ã—Ç–∞ */}
                    <div className="bg-gray-900/60 px-2 py-1 rounded border border-gray-700 shadow-md">
                        <div className="flex justify-between text-xs text-gray-400 mb-1">
                            <span>–û–ø—ã—Ç:</span>
                            <span className="text-yellow-400">
                                {character.experience}/
                                {character.exp_to_next_level}
                            </span>
                        </div>
                        <div className="h-2 relative w-full bg-gray-900 rounded-full overflow-hidden border border-gray-800">
                            <div
                                className="h-full bg-gradient-to-r from-yellow-700 to-yellow-500 transition-all duration-300"
                                style={{
                                    width: `${
                                        (character.experience /
                                            character.exp_to_next_level) *
                                        100
                                    }%`,
                                }}
                            ></div>
                        </div>
                    </div>
                </div>

                {/* –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ */}
                <div className="flex space-x-3 mx-4">
                    <button
                        className="bg-gradient-to-b from-gray-800 to-gray-900 border border-red-900/40 rounded-md p-2 hover:from-gray-700 hover:to-gray-800 transition-all shadow-md group"
                        title="–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"
                    >
                        <div className="flex flex-col items-center">
                            <span className="text-xl text-red-500 group-hover:text-red-400">
                                üéí
                            </span>
                            <span className="text-xs text-gray-400 mt-1 group-hover:text-gray-300">
                                –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
                            </span>
                        </div>
                    </button>
                    <button
                        className="bg-gradient-to-b from-gray-800 to-gray-900 border border-red-900/40 rounded-md p-2 hover:from-gray-700 hover:to-gray-800 transition-all shadow-md group"
                        title="–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–≤—ã–∫–∏"
                    >
                        <div className="flex flex-col items-center">
                            <span className="text-xl text-red-500 group-hover:text-red-400">
                                ‚öîÔ∏è
                            </span>
                            <span className="text-xs text-gray-400 mt-1 group-hover:text-gray-300">
                                –ù–∞–≤—ã–∫–∏
                            </span>
                        </div>
                    </button>
                </div>

                {/* –í–∞–ª—é—Ç–∞ */}
                <div className="grid grid-cols-2 gap-2 ml-4 w-32">
                    {/* –ë–ª–æ–∫ –∑–æ–ª–æ—Ç–∞ */}
                    <div className="bg-gray-900/60 px-3 py-1 rounded text-xs text-gray-300 border border-gray-700 flex items-center shadow-md">
                        <span className="text-yellow-500 mr-2">üí∞</span> 0
                    </div>
                    {/* –ë–ª–æ–∫ –∞–ª–º–∞–∑–æ–≤ */}
                    <div className="bg-gray-900/60 px-3 py-1 rounded text-xs text-gray-300 border border-gray-700 flex items-center shadow-md">
                        <span className="text-red-500 mr-2">üíé</span> 0
                    </div>
                </div>
            </div>

            {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
            <div className="flex-1 flex">
                {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π */}
                <div className="w-60 bg-gradient-to-b from-gray-800 to-gray-900 border-r border-red-900/50 overflow-y-auto flex flex-col shadow-lg">
                    <div className="p-3 border-b border-red-900/40 bg-gray-900">
                        <h3 className="text-red-500 text-sm font-medieval uppercase tracking-wider text-center">
                            –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
                        </h3>
                    </div>
                    <div className="p-2 space-y-2 flex-1 game-panel overflow-y-auto">
                        {locationStore.availableLocations
                            .filter(
                                (location) =>
                                    location.is_accessible_from_current &&
                                    !location.is_current
                            )
                            .map((location) => (
                                <LocationItem
                                    key={location.id}
                                    location={location}
                                    onClick={handleLocationSelect}
                                    isActive={
                                        activeLocation?.id === location.id
                                    }
                                    onShowRequirements={
                                        handleShowLocationRequirements
                                    }
                                />
                            ))}
                        {locationStore.availableLocations.filter(
                            (location) =>
                                location.is_accessible_from_current &&
                                !location.is_current
                        ).length === 0 && (
                            <div className="text-sm text-gray-500 text-center p-4">
                                <div className="font-medieval text-red-500">
                                    –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
                                </div>
                                <div className="mt-3 text-xs text-gray-500">
                                    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å—Å–ª–µ–¥—É–π—Ç–µ —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é,
                                    —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—É—Ç—å –≤ –Ω–æ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏
                                </div>
                                {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å */}
                                <div className="mt-4 text-xs text-gray-600 border-t border-gray-800 pt-2">
                                    <div>
                                        –í—Å–µ–≥–æ –ª–æ–∫–∞—Ü–∏–π:{" "}
                                        {
                                            locationStore.availableLocations
                                                .length
                                        }
                                    </div>
                                    <div>
                                        –¢–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è:{" "}
                                        {activeLocation?.name || "–ù–µ—Ç"}
                                    </div>
                                    <div className="mt-1 text-left">
                                        <div className="text-xs font-bold text-gray-500 mb-1">
                                            –í—Å–µ –ª–æ–∫–∞—Ü–∏–∏:
                                        </div>
                                        {locationStore.availableLocations.map(
                                            (loc) => (
                                                <div
                                                    key={loc.id}
                                                    className="text-left px-2 text-xs text-gray-600 border-b border-gray-800 pb-1 mb-1"
                                                >
                                                    <div>
                                                        {loc.name} (ID: {loc.id}
                                                        )
                                                    </div>
                                                    <div className="ml-2">
                                                        {loc.is_current && (
                                                            <span className="text-blue-500">
                                                                –¢–µ–∫—É—â–∞—è
                                                            </span>
                                                        )}
                                                        {loc.is_accessible_from_current ? (
                                                            <span className="text-green-500 ml-2">
                                                                –î–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è
                                                                –ø–µ—Ä–µ—Ö–æ–¥–∞
                                                            </span>
                                                        ) : (
                                                            <span className="text-red-500 ml-2">
                                                                –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è
                                                                –ø–µ—Ä–µ—Ö–æ–¥–∞
                                                            </span>
                                                        )}
                                                    </div>
                                                </div>
                                            )
                                        )}
                                    </div>
                                </div>
                            </div>
                        )}
                    </div>

                    <div className="p-3 border-t border-red-900/40 mt-auto bg-gray-900/70">
                        <Button
                            variant="secondary"
                            size="sm"
                            className="w-full text-xs flex items-center justify-center"
                            onClick={() =>
                                navigate(`/character/${character.id}`)
                            }
                        >
                            <ProfileIcon
                                className="text-gray-400 mr-2"
                                size={16}
                            />
                            –ü—Ä–æ—Ñ–∏–ª—å
                        </Button>
                    </div>
                </div>

                {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ */}
                <div className="flex-1 flex flex-col relative">
                    {/* –§–æ–Ω –ª–æ–∫–∞—Ü–∏–∏ */}
                    <div className="absolute inset-0 z-0">
                        <img
                            src={
                                activeLocation?.image_url ||
                                "/images/locations/fallback-location.jpg"
                            }
                            alt={activeLocation?.name || "–õ–æ–∫–∞—Ü–∏—è"}
                            className="w-full h-full object-cover opacity-90"
                            onError={(e) => {
                                (e.target as HTMLImageElement).src =
                                    "/images/locations/fallback-location.jpg";
                            }}
                        />
                        <div className="absolute inset-0 bg-gradient-to-t from-gray-900 via-gray-900/40 to-transparent"></div>
                    </div>

                    {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –≤ —Ä–∞–º–∫–µ */}
                    <div className="absolute top-4 left-1/2 transform -translate-x-1/2 z-10 bg-gray-900/70 px-6 py-4 rounded-lg border border-red-900/50 shadow-md max-w-2xl">
                        <h2 className="text-2xl text-red-400 font-medieval drop-shadow-lg text-center">
                            {activeLocation?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ"}
                        </h2>
                        <p className="text-sm text-gray-300 mt-2 text-center">
                            {activeLocation?.description ||
                                "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"}
                        </p>
                    </div>

                    {/* –ö–æ–Ω—Ç—Ä–æ–ª—å –ª–æ–∫–∞—Ü–∏–∏ */}
                    <div className="mt-auto p-4 z-10 bg-gray-900/40 border-t border-red-900/30">
                        <div className="flex justify-between max-w-md mx-auto">
                            <Button
                                variant="primary"
                                size="sm"
                                className="flex items-center"
                                onClick={handleExplore}
                            >
                                <ExploreIcon
                                    className="text-gray-300 mr-2"
                                    size={16}
                                />
                                –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å
                            </Button>

                            <Button
                                variant="secondary"
                                size="sm"
                                className="flex items-center"
                            >
                                <LeaveIcon
                                    className="text-gray-300 mr-2"
                                    size={16}
                                />
                                –ü–æ–∫–∏–Ω—É—Ç—å –ª–æ–∫–∞—Ü–∏—é
                            </Button>
                        </div>
                    </div>
                </div>

                {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –û–±—ä–µ–∫—Ç—ã –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏ */}
                <div className="w-64 bg-gradient-to-b from-gray-800 to-gray-900 border-l border-red-900/50 overflow-y-auto flex flex-col shadow-lg">
                    <div className="p-3 border-b border-red-900/40 bg-gray-900">
                        <h3 className="text-red-500 text-sm font-medieval uppercase tracking-wider text-center">
                            –û–±—ä–µ–∫—Ç—ã
                        </h3>
                    </div>
                    <div className="p-2 flex-1 space-y-1 game-panel overflow-y-auto">
                        {activeLocation?.objects ? (
                            activeLocation.objects.map((object, index) => (
                                <GameObjectItem
                                    key={`${object.id}-${index}`}
                                    object={object}
                                    onClick={handleObjectSelect}
                                />
                            ))
                        ) : (
                            <div className="text-sm text-gray-500 text-center p-4">
                                –í —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤
                            </div>
                        )}
                    </div>

                    <div className="p-2 mt-2">
                        <LocationMap
                            locations={locationStore.availableLocations}
                            connections={locationConnections}
                            currentLocation={activeLocation}
                            onLocationSelect={handleLocationSelect}
                            width={250}
                            height={150}
                        />
                    </div>
                </div>
            </div>

            {/* –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å - –ß–∞—Ç –∏ –ª–æ–≥–∏ */}
            <div className="h-36 bg-gradient-to-t from-gray-900 to-gray-800 border-t border-red-900/60 flex shadow-inner">
                <div className="flex-1 border-r border-red-900/40 p-3 flex flex-col">
                    <div className="text-xs text-gray-400 mb-1 font-medieval">
                        –°–æ–æ–±—â–µ–Ω–∏—è:
                    </div>
                    <div className="flex-1 overflow-y-auto text-xs space-y-1 pb-2 bg-gray-900/70 p-2 rounded-md border border-red-900/30 mb-1 game-panel">
                        <div className="text-red-500">
                            <strong>[–°–∏—Å—Ç–µ–º–∞]</strong> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä
                            Echoes of Oblivion!
                        </div>
                        <div className="text-yellow-500">
                            <strong>[–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ]</strong> –í—ã –≤–æ—à–ª–∏ –≤ –æ–ø–∞—Å–Ω—É—é
                            –∑–æ–Ω—É. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã.
                        </div>
                        <div className="text-gray-400">
                            <strong>[–°—Ç–∞—Ä–µ–π—à–∏–Ω–∞ –ò—Ä–º–µ–ª—å]</strong> –Ø –∂–¥–∞–ª–∞ —Ç–µ–±—è,
                            –ø—É—Ç–Ω–∏–∫. –£ –º–µ–Ω—è –µ—Å—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ç–µ–±—è...
                        </div>
                    </div>

                    <div className="flex">
                        <input
                            type="text"
                            className="flex-1 bg-gray-800 border border-gray-700 text-gray-300 text-xs py-1.5 px-3 rounded-l-md focus:outline-none focus:border-red-900"
                            placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                        />
                        <button className="bg-red-900 text-gray-200 px-4 py-1.5 text-xs rounded-r-md hover:bg-red-800 border border-red-800">
                            –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                        </button>
                    </div>
                </div>

                <div className="w-64 p-3 flex flex-col">
                    <div className="flex items-center justify-between mb-1">
                        <div className="text-xs text-gray-400 font-medieval">
                            –ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π:
                        </div>
                        <div className="flex space-x-1">
                            <button
                                className="text-xs text-gray-500 hover:text-gray-300 transition-colors focus:outline-none"
                                title="–û–±–Ω–æ–≤–∏—Ç—å –∂—É—Ä–Ω–∞–ª"
                                onClick={() => {
                                    journalStore.addEntry(
                                        "–ñ—É—Ä–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω",
                                        "system"
                                    );
                                }}
                            >
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    className="h-3.5 w-3.5"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    stroke="currentColor"
                                >
                                    <path
                                        strokeLinecap="round"
                                        strokeLinejoin="round"
                                        strokeWidth={2}
                                        d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                                    />
                                </svg>
                            </button>
                            <button
                                className="text-xs text-gray-500 hover:text-red-400 transition-colors focus:outline-none"
                                title="–û—á–∏—Å—Ç–∏—Ç—å –∂—É—Ä–Ω–∞–ª"
                                onClick={() => {
                                    if (confirm("–û—á–∏—Å—Ç–∏—Ç—å –∂—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π?")) {
                                        journalStore.clearJournal();
                                        journalStore.addEntry(
                                            "–ñ—É—Ä–Ω–∞–ª –æ—á–∏—â–µ–Ω",
                                            "system"
                                        );
                                    }
                                }}
                            >
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    className="h-3.5 w-3.5"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    stroke="currentColor"
                                >
                                    <path
                                        strokeLinecap="round"
                                        strokeLinejoin="round"
                                        strokeWidth={2}
                                        d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
                                    />
                                </svg>
                            </button>
                        </div>
                    </div>
                    <div className="flex-1 overflow-y-auto text-xs bg-gray-900/70 p-2 rounded-md border border-red-900/30 game-panel">
                        {journalStore.getLastEntries(15).map((entry) => (
                            <JournalEntryItem key={entry.id} entry={entry} />
                        ))}
                        {journalStore.entries.length === 0 && (
                            <div className="text-gray-600 text-center p-2">
                                –ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π –ø—É—Å—Ç
                            </div>
                        )}
                    </div>
                </div>
            </div>

            {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π */}
            {selectedNpc && (
                <NpcInteractionModal
                    isOpen={isNpcModalOpen}
                    onClose={() => setIsNpcModalOpen(false)}
                    npc={{
                        id: selectedNpc.id,
                        name: selectedNpc.name,
                        type: selectedNpc.type,
                    }}
                />
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –±–æ—è */}
            {currentEnemy && characterStore.selectedCharacter && (
                <CombatModal
                    isOpen={isCombatModalOpen}
                    onClose={() => {
                        setIsCombatModalOpen(false);
                        // –°–±—Ä–æ—Å –≤—Ä–∞–≥–∞ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π,
                        // —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –≥–ª—é–∫–æ–≤ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
                        setTimeout(() => setCurrentEnemy(null), 300);
                    }}
                    onVictory={handleCombatVictory}
                    onDefeat={handleCombatDefeat}
                    enemy={currentEnemy}
                    character={{
                        id: characterStore.selectedCharacter.id,
                        name: characterStore.selectedCharacter.name,
                        health: characterStore.selectedCharacter.health,
                        maxHealth: characterStore.selectedCharacter.max_health,
                        mana: characterStore.selectedCharacter.mana,
                        maxMana: characterStore.selectedCharacter.max_mana,
                        stamina: characterStore.selectedCharacter.stamina,
                        maxStamina:
                            characterStore.selectedCharacter.max_stamina,
                        strength: characterStore.selectedCharacter.strength,
                        agility: characterStore.selectedCharacter.agility,
                        intelligence:
                            characterStore.selectedCharacter.intelligence,
                    }}
                />
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –ª–æ–∫–∞—Ü–∏–∏ */}
            <LocationRequirementsModal
                isOpen={isRequirementsModalOpen}
                onClose={() => setIsRequirementsModalOpen(false)}
                location={selectedLocation}
            />

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è */}
            {activeLocation && selectedTargetLocation && (
                <TravelModal
                    isOpen={isTravelModalOpen}
                    fromLocation={activeLocation}
                    toLocation={selectedTargetLocation}
                    travelTime={travelTime}
                    baseTravelTime={baseTravelTime}
                    savedTime={savedTime}
                    onComplete={completeTravelToLocation}
                    onCancel={cancelTravel}
                    isLocationPreloaded={isLocationPreloaded}
                />
            )}
        </div>
    );
});

export default GameInterface;
