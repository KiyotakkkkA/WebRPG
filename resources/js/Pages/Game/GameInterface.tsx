import React, { useEffect, useState, Fragment } from "react";
import { useNavigate } from "react-router-dom";
import { observer } from "mobx-react-lite";
import characterStore from "../../stores/CharacterStore";
import locationStore, {
    Location,
    LocationObject,
    LocationsLoadResult,
    LocationConnection,
} from "../../stores/LocationStore";
import journalStore, { JournalEntry } from "../../stores/JournalStore";
import Button from "../../Components/ui/Button";
import {
    objectTypeIcons,
    objectIconMap,
    actionIcons,
    ProfileIcon,
    ExploreIcon,
    LeaveIcon,
} from "../../Components/ui/GameIcons";
import NpcInteractionModal from "../../Components/game/NpcInteractionModal";
import CombatModal from "../../Components/game/CombatModal";
import { Dialog, Transition } from "@headlessui/react";
import { runInAction } from "mobx";
import TravelModal from "../../Components/game/TravelModal";
import axios from "axios";
import GameHeader from "../../Layouts/GameHeader";
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º React Query
import {
    useQuery,
    useMutation,
    QueryClient,
    QueryClientProvider,
    UseMutationResult,
} from "@tanstack/react-query";

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Ä–∞–≥–∞
interface Enemy {
    id: string;
    name: string;
    image?: string;
    health: number;
    maxHealth: number;
    level: number;
    damage: number;
    defense: number;
    experience: number;
    gold: number;
    drops?: {
        id: string;
        name: string;
        chance: number;
    }[];
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
const GameObjectItem: React.FC<{
    object: LocationObject;
    onClick: (object: LocationObject) => void;
}> = ({ object, onClick }) => {
    const icon =
        objectIconMap[object.id as keyof typeof objectIconMap] ||
        objectTypeIcons[object.type as keyof typeof objectTypeIcons];

    return (
        <div
            className="flex items-center space-x-2 p-2 hover:bg-gray-800/60 rounded-md cursor-pointer border border-transparent hover:border-red-900/30 transition-colors"
            onClick={() => onClick(object)}
        >
            <span className="text-gray-400 w-6">
                {icon || <span className="text-xl">{object.icon}</span>}
            </span>
            <span className="text-sm text-gray-300">{object.name}</span>
        </div>
    );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ª–æ–∫–∞—Ü–∏–∏
const LocationRequirement: React.FC<{
    requirement: {
        type: string;
        parameter: string;
        value: number | string;
        description: string;
        fulfilled: boolean;
        current_value?: number | string;
    };
}> = ({ requirement }) => {
    // –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    const requirementIcons: Record<string, string> = {
        level: "‚≠ê",
        quest: "üìú",
        skill: "‚öîÔ∏è",
        gold: "üí∞",
        item: "üéí",
        attribute: "üí™",
        strength: "üí™",
        agility: "üèÉ",
        intelligence: "üß†",
        vitality: "‚ù§Ô∏è",
        luck: "üçÄ",
        charisma: "üëÑ",
        wisdom: "üìö",
        dexterity: "‚úã",
        constitution: "üõ°Ô∏è",
    };

    // –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    const getAttributeName = (attribute: string): string => {
        const attributeNames: Record<string, string> = {
            level: "–£—Ä–æ–≤–µ–Ω—å",
            quest: "–ö–≤–µ—Å—Ç",
            skill: "–ù–∞–≤—ã–∫",
            gold: "–ó–æ–ª–æ—Ç–æ",
            item: "–ü—Ä–µ–¥–º–µ—Ç",
            attribute: "–ê—Ç—Ä–∏–±—É—Ç",
            strength: "–°–∏–ª–∞",
            agility: "–õ–æ–≤–∫–æ—Å—Ç—å",
            intelligence: "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç",
            vitality: "–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å",
            luck: "–£–¥–∞—á–∞",
            charisma: "–•–∞—Ä–∏–∑–º–∞",
            wisdom: "–ú—É–¥—Ä–æ—Å—Ç—å",
            dexterity: "–ü—Ä–æ–≤–æ—Ä—Å—Ç–≤–æ",
            constitution: "–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ",
        };

        return attributeNames[attribute] || attribute;
    };

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    const getRequirementText = (): string => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if (requirement.description) {
            return requirement.description;
        }

        // –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        if (requirement.type === "attribute") {
            const attributeName = getAttributeName(requirement.parameter);
            return `${attributeName} ${requirement.value}`;
        } else {
            // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
            return `${getAttributeName(requirement.type)} ${requirement.value}`;
        }
    };

    return (
        <div
            className={`text-xs flex items-center ${
                requirement.fulfilled ? "text-green-400" : "text-red-400"
            }`}
        >
            <span className="mr-1">
                {requirementIcons[requirement.type] ||
                    requirementIcons[requirement.parameter] ||
                    "‚ùì"}
            </span>
            <span>{getRequirementText()}</span>
            {requirement.current_value !== undefined && (
                <span className="ml-1 font-medium">
                    ({requirement.current_value}/{requirement.value})
                </span>
            )}
        </div>
    );
};

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –ª–æ–∫–∞—Ü–∏–∏
const LocationRequirementsModal: React.FC<{
    isOpen: boolean;
    onClose: () => void;
    location: Location | null;
}> = ({ isOpen, onClose, location }) => {
    if (!location) return null;

    return (
        <Transition appear show={isOpen} as={Fragment}>
            <Dialog as="div" className="relative z-50" onClose={onClose}>
                <Transition.Child
                    as={Fragment}
                    enter="ease-out duration-300"
                    enterFrom="opacity-0"
                    enterTo="opacity-100"
                    leave="ease-in duration-200"
                    leaveFrom="opacity-100"
                    leaveTo="opacity-0"
                >
                    <div className="fixed inset-0 bg-black bg-opacity-70" />
                </Transition.Child>

                <div className="fixed inset-0 overflow-y-auto">
                    <div className="flex min-h-full items-center justify-center p-4 text-center">
                        <Transition.Child
                            as={Fragment}
                            enter="ease-out duration-300"
                            enterFrom="opacity-0 scale-95"
                            enterTo="opacity-100 scale-100"
                            leave="ease-in duration-200"
                            leaveFrom="opacity-100 scale-100"
                            leaveTo="opacity-0 scale-95"
                        >
                            <Dialog.Panel className="w-full max-w-md transform overflow-hidden rounded-md bg-gray-900 border border-red-900/40 p-6 text-left align-middle shadow-xl transition-all">
                                <Dialog.Title
                                    as="h3"
                                    className="text-lg font-medieval text-red-500 text-center mb-4"
                                >
                                    –õ–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {location.name}
                                </Dialog.Title>
                                <div className="mt-2">
                                    <p className="text-sm text-gray-400 mb-4">
                                        –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                                        –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª–æ–≤–∏—è:
                                    </p>
                                    <div className="space-y-2 bg-gray-800/60 p-3 rounded-md border border-gray-700/60">
                                        {location.requirements &&
                                        location.requirements.length > 0 ? (
                                            location.requirements.map(
                                                (req, idx) => (
                                                    <LocationRequirement
                                                        key={idx}
                                                        requirement={req}
                                                    />
                                                )
                                            )
                                        ) : (
                                            <p className="text-xs text-gray-500">
                                                –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ
                                                —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö
                                            </p>
                                        )}
                                    </div>
                                </div>

                                <div className="mt-6 flex justify-center">
                                    <Button
                                        variant="secondary"
                                        size="sm"
                                        onClick={onClose}
                                    >
                                        –ü–æ–Ω—è—Ç–Ω–æ
                                    </Button>
                                </div>
                            </Dialog.Panel>
                        </Transition.Child>
                    </div>
                </div>
            </Dialog>
        </Transition>
    );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
const LocationItem: React.FC<{
    location: Location;
    onClick: (location: Location) => void;
    isActive: boolean;
    onShowRequirements: (location: Location) => void;
}> = ({ location, onClick, isActive, onShowRequirements }) => {
    return (
        <div
            className={`p-2 rounded-md cursor-pointer transition-colors ${
                isActive
                    ? "bg-red-900/30 border border-red-800/50"
                    : "hover:bg-gray-800/60 border border-transparent hover:border-red-900/30"
            }`}
            onClick={() => {
                if (location.is_accessible) {
                    onClick(location);
                } else {
                    onShowRequirements(location);
                }
            }}
        >
            <div className="flex items-center justify-between">
                <span
                    className={`text-sm ${
                        location.is_accessible
                            ? "text-red-400"
                            : "text-gray-500"
                    }`}
                >
                    {location.name}
                </span>
                {!location.is_accessible && (
                    <span className="text-xs text-red-500 ml-auto">‚ö†</span>
                )}
            </div>
            {location.region && (
                <div className="text-xs text-gray-500 mt-1">
                    <span className="opacity-70">{location.region.name}</span>
                </div>
            )}
        </div>
    );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –∂—É—Ä–Ω–∞–ª–µ
const JournalEntryItem: React.FC<{ entry: JournalEntry }> = ({ entry }) => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –∏ –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø–∏—Å–∏
    const getEntryStyle = (type: JournalEntry["type"]) => {
        switch (type) {
            case "location":
                return { color: "text-blue-400", icon: "‚û§" };
            case "item":
                return { color: "text-green-400", icon: "‚úì" };
            case "combat":
                return { color: "text-red-400", icon: "‚öîÔ∏è" };
            case "quest":
                return { color: "text-yellow-400", icon: "üìú" };
            case "error":
                return { color: "text-red-500", icon: "‚úó" };
            case "system":
            default:
                return { color: "text-gray-400", icon: "‚Ä¢" };
        }
    };

    const style = getEntryStyle(entry.type);
    const time = journalStore.formatEntryTime(entry.timestamp);

    return (
        <div className={`mb-1 ${style.color}`}>
            <span className="text-gray-600 mr-1">{style.icon}</span>
            <span className="text-gray-500 text-xs mr-1">[{time}]</span>
            {entry.text}
        </div>
    );
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
const getImageUrl = (imagePath: string) => {
    if (!imagePath)
        return (
            window.location.origin + "/images/locations/fallback-location.jpg"
        );

    // –ï—Å–ª–∏ –ø—É—Ç—å —É–∂–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http –∏–ª–∏ https, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (imagePath.startsWith("http://") || imagePath.startsWith("https://")) {
        return imagePath;
    }

    // –ï—Å–ª–∏ –ø—É—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ origin
    if (imagePath.startsWith("/")) {
        return window.location.origin + imagePath;
    }

    // –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º origin –∏ /
    return window.location.origin + "/" + imagePath;
};

// –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –≤—ã—à–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ GameInterface
const TutorialModal: React.FC<{
    isOpen: boolean;
    onClose: () => void;
    characterName: string;
    characterId: number;
}> = ({ isOpen, onClose, characterName, characterId }) => {
    const [currentStep, setCurrentStep] = React.useState(0);

    const tutorialSteps = [
        {
            title: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≠—Ö–æ –ó–∞–±–≤–µ–Ω–∏—è!",
            content: `${characterName}, –≤—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–∏–±—ã–ª–∏ –≤ —ç—Ç–æ—Ç –º—Ä–∞—á–Ω—ã–π –∏ –æ–ø–∞—Å–Ω—ã–π –º–∏—Ä. –í–∞—à–µ –≤—ã–∂–∏–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–∏—Ö —Ä–µ—à–µ–Ω–∏–π –∏ –¥–µ–π—Å—Ç–≤–∏–π.`,
            image: "/images/tutorial/welcome.jpg",
        },
        {
            title: "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–π",
            content:
                "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è –º–µ–∂–¥—É –ª–æ–∫–∞—Ü–∏—è–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∫–∞—Ä—Ç—É –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã - –Ω–µ –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã!",
            image: "/images/tutorial/locations.jpg",
        },
        {
            title: "–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏",
            content:
                "–í –∫–∞–∂–¥–æ–π –ª–æ–∫–∞—Ü–∏–∏ –º–æ–≥—É—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã - –æ—Ç –ø–æ—Å—Ç—Ä–æ–µ–∫ –∏ NPC –¥–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –º–æ–Ω—Å—Ç—Ä–æ–≤. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–±—ä–µ–∫—Ç, —á—Ç–æ–±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –Ω–∏–º.",
            image: "/images/tutorial/objects.jpg",
        },
        {
            title: "–ñ—É—Ä–Ω–∞–ª –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π",
            content:
                "–í—Å–µ –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –∏ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ –∂—É—Ä–Ω–∞–ª. –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–µ–º—É, –µ—Å–ª–∏ –∑–∞–±—ã–ª–∏, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ —Ä–∞–Ω–µ–µ.",
            image: "/images/tutorial/journal.jpg",
        },
    ];

    const handleClose = async () => {
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ is_new
            await axios.post("/api/characters/tutorial-completed", {
                character_id: characterId,
            });
        } catch (error) {}
        onClose();
    };

    const nextStep = () => {
        if (currentStep < tutorialSteps.length - 1) {
            setCurrentStep(currentStep + 1);
        } else {
            handleClose();
        }
    };

    const prevStep = () => {
        if (currentStep > 0) {
            setCurrentStep(currentStep - 1);
        }
    };

    const step = tutorialSteps[currentStep];

    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 z-50 overflow-y-auto">
            <div className="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
                <div
                    className="fixed inset-0 transition-opacity"
                    aria-hidden="true"
                >
                    <div className="absolute inset-0 bg-gray-900 opacity-75"></div>
                </div>

                <div className="inline-block align-bottom bg-gray-800 rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-3xl sm:w-full">
                    <div className="bg-gray-800 px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                        <div className="sm:flex sm:items-start">
                            <div className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                                <h3 className="text-2xl leading-6 font-medieval text-red-500 mb-4">
                                    {step.title}
                                </h3>

                                <div className="my-4">
                                    <img
                                        src={step.image}
                                        alt={step.title}
                                        className="w-full h-64 object-cover rounded-md border border-gray-700"
                                        onError={(
                                            e: React.SyntheticEvent<HTMLImageElement>
                                        ) => {
                                            (e.target as HTMLImageElement).src =
                                                "/images/fallback-location.jpg";
                                        }}
                                    />
                                </div>

                                <div className="mt-2">
                                    <p className="text-gray-300 text-lg">
                                        {step.content}
                                    </p>
                                </div>

                                <div className="mt-5 flex justify-between">
                                    <button
                                        type="button"
                                        onClick={prevStep}
                                        disabled={currentStep === 0}
                                        className={`inline-flex justify-center rounded-md border border-transparent px-4 py-2 text-base font-medium focus:outline-none sm:text-sm ${
                                            currentStep === 0
                                                ? "bg-gray-700 text-gray-500 cursor-not-allowed"
                                                : "bg-red-900 text-white hover:bg-red-800"
                                        }`}
                                    >
                                        –ù–∞–∑–∞–¥
                                    </button>

                                    <div className="flex space-x-2">
                                        {tutorialSteps.map((_, index) => (
                                            <div
                                                key={index}
                                                className={`w-2 h-2 rounded-full ${
                                                    index === currentStep
                                                        ? "bg-red-500"
                                                        : "bg-gray-600"
                                                }`}
                                            ></div>
                                        ))}
                                    </div>

                                    <button
                                        type="button"
                                        onClick={nextStep}
                                        className="inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none sm:text-sm"
                                    >
                                        {currentStep < tutorialSteps.length - 1
                                            ? "–î–∞–ª–µ–µ"
                                            : "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"}
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

// –î–æ–±–∞–≤–∏–º –∏–∫–æ–Ω–∫—É –¥–ª—è –∫–∞—Ä—Ç—ã
const WorldMapIcon = ({ size = 24, className = "" }) => (
    <svg
        xmlns="http://www.w3.org/2000/svg"
        width={size}
        height={size}
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
        className={className}
    >
        <path d="M3 6l6-3l6 3l6-3v15l-6 3l-6-3l-6 3V6z" />
        <path d="M9 3v15" />
        <path d="M15 6v15" />
    </svg>
);

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è React Query
const queryClient = new QueryClient({
    defaultOptions: {
        queries: {
            refetchOnWindowFocus: false,
            retry: false,
        },
    },
});

// –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤ QueryClientProvider
const GameInterfaceWithQueryProvider = () => {
    return (
        <QueryClientProvider client={queryClient}>
            <GameInterface />
        </QueryClientProvider>
    );
};

// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–≥—Ä–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const GameInterface: React.FC = observer(() => {
    const navigate = useNavigate();
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏
    const [activeLocation, setActiveLocation] = useState<Location | null>(null);

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ NPC
    const [isNpcModalOpen, setIsNpcModalOpen] = useState(false);
    const [selectedNpc, setSelectedNpc] = useState<LocationObject | null>(null);

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±–æ–µ–≤–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const [isCombatModalOpen, setIsCombatModalOpen] = useState(false);
    const [currentEnemy, setCurrentEnemy] = useState<Enemy | null>(null);

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –ª–æ–∫–∞—Ü–∏–∏
    const [isRequirementsModalOpen, setIsRequirementsModalOpen] =
        useState(false);
    const [selectedLocation, setSelectedLocation] = useState<Location | null>(
        null
    );

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è
    const [isTravelModalOpen, setIsTravelModalOpen] = useState(false);
    const [selectedTargetLocation, setSelectedTargetLocation] =
        useState<Location | null>(null);
    const [travelTime, setTravelTime] = useState(0);
    const [baseTravelTime, setBaseTravelTime] = useState(0);
    const [savedTime, setSavedTime] = useState(0);
    const [isLocationPreloaded, setIsLocationPreloaded] = useState(false);

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –º–µ–∂–¥—É –ª–æ–∫–∞—Ü–∏—è–º–∏
    const [locationConnections, setLocationConnections] = useState<
        LocationConnection[]
    >([]);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—É—Ç–æ—Ä–∏–∞–ª–∞
    const [showTutorial, setShowTutorial] = React.useState(false);

    // –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤—Ä–∞–≥–æ–≤ –¥–ª—è –ª–æ–∫–∞—Ü–∏–π
    const locationEnemies: Record<string, Enemy[]> = {
        1: [], // –í –ª–∞–≥–µ—Ä–µ –Ω–µ—Ç –≤—Ä–∞–≥–æ–≤
        2: [
            {
                id: "wounded-wolf",
                name: "–†–∞–Ω–µ–Ω—ã–π —Ç–µ–Ω–µ–≤–æ–π –≤–æ–ª–∫",
                health: 50,
                maxHealth: 50,
                level: 2,
                damage: 8,
                defense: 3,
                experience: 35,
                gold: 5,
                drops: [
                    {
                        id: "wolf-fang",
                        name: "–ö–ª—ã–∫ —Ç–µ–Ω–µ–≤–æ–≥–æ –≤–æ–ª–∫–∞",
                        chance: 0.7,
                    },
                    {
                        id: "shadow-essence",
                        name: "–≠—Å—Å–µ–Ω—Ü–∏—è —Ç–µ–Ω–∏",
                        chance: 0.3,
                    },
                ],
            },
            {
                id: "corrupted-tree",
                name: "–û—Å–∫–≤–µ—Ä–Ω–µ–Ω–Ω–æ–µ –¥—Ä–µ–≤–æ",
                health: 80,
                maxHealth: 80,
                level: 3,
                damage: 5,
                defense: 8,
                experience: 45,
                gold: 3,
                drops: [
                    { id: "dark-bark", name: "–¢–µ–º–Ω–∞—è –∫–æ—Ä–∞", chance: 0.8 },
                    {
                        id: "corrupted-sap",
                        name: "–û—Å–∫–≤–µ—Ä–Ω–µ–Ω–Ω—ã–π —Å–æ–∫",
                        chance: 0.4,
                    },
                ],
            },
        ],
        3: [
            {
                id: "skeleton-warrior",
                name: "–°–∫–µ–ª–µ—Ç-–≤–æ–∏–Ω",
                health: 60,
                maxHealth: 60,
                level: 4,
                damage: 10,
                defense: 5,
                experience: 50,
                gold: 8,
                drops: [
                    {
                        id: "rusted-sword",
                        name: "–ü—Ä–æ—Ä–∂–∞–≤–µ–≤—à–∏–π –º–µ—á",
                        chance: 0.6,
                    },
                    { id: "bone-dust", name: "–ö–æ—Å—Ç–Ω–∞—è –ø—ã–ª—å", chance: 0.5 },
                ],
            },
        ],
        4: [
            {
                id: "dark-mage",
                name: "–¢–µ–º–Ω—ã–π –º–∞–≥",
                health: 70,
                maxHealth: 70,
                level: 5,
                damage: 12,
                defense: 4,
                experience: 70,
                gold: 15,
                drops: [
                    {
                        id: "dark-crystal",
                        name: "–¢–µ–º–Ω—ã–π –∫—Ä–∏—Å—Ç–∞–ª–ª",
                        chance: 0.5,
                    },
                    {
                        id: "spell-scroll",
                        name: "–°–≤–∏—Ç–æ–∫ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è",
                        chance: 0.4,
                    },
                    { id: "mage-robe", name: "–ú–∞–Ω—Ç–∏—è –º–∞–≥–∞", chance: 0.2 },
                ],
            },
        ],
    };

    // useQuery –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    const {
        data: charactersData,
        isLoading: charactersLoading,
        error: charactersError,
    } = useQuery({
        queryKey: ["characters"],
        queryFn: () => characterStore.loadCharacters(),
        enabled: !characterStore.selectedCharacter, // –ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    });

    // useQuery –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞—Ü–∏–π, –∞–∫—Ç–∏–≤–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    const {
        data: locationsData,
        isLoading: locationsLoading,
        error: locationsError,
    } = useQuery({
        queryKey: ["availableLocations", characterStore.selectedCharacter?.id],
        queryFn: () =>
            locationStore.loadAvailableLocations(
                characterStore.selectedCharacter!.id
            ),
        enabled: !!characterStore.selectedCharacter,
    });

    // useQuery –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –º–µ–∂–¥—É –ª–æ–∫–∞—Ü–∏—è–º–∏
    const {
        data: connectionsData,
        isLoading: connectionsLoading,
        error: connectionsError,
    } = useQuery({
        queryKey: ["locationConnections"],
        queryFn: () => locationStore.loadLocationConnections(),
        enabled: !!characterStore.selectedCharacter,
    });

    // useMutation –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫ –ª–æ–∫–∞—Ü–∏–∏
    const { mutate: moveToLocation } = useMutation({
        mutationFn: ({
            characterId,
            locationId,
        }: {
            characterId: number;
            locationId: number;
        }) => locationStore.moveToLocation(characterId, locationId),
        onSuccess: (result) => {
            if (result.success) {
                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –≤ –∂—É—Ä–Ω–∞–ª
                journalStore.addEntry(
                    `–í—ã –ø—Ä–∏–±—ã–ª–∏ –≤ –ª–æ–∫–∞—Ü–∏—é ${selectedTargetLocation?.name}`,
                    "location"
                );
                setActiveLocation(result.location as Location | null);

                // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
                queryClient.invalidateQueries({
                    queryKey: ["availableLocations"],
                });
                queryClient.invalidateQueries({
                    queryKey: ["locationConnections"],
                });

                // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                if (characterStore.selectedCharacter) {
                    queryClient.invalidateQueries({
                        queryKey: [
                            "character",
                            characterStore.selectedCharacter.id,
                        ],
                    });
                }
            } else {
                console.error(
                    `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –≤ –ª–æ–∫–∞—Ü–∏—é: ${result.error}`,
                    result.debug
                );

                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ—à–∏–±–∫–µ
                journalStore.addEntry(
                    `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ –ª–æ–∫–∞—Ü–∏—é ${selectedTargetLocation?.name}: ${result.error}`,
                    "error"
                );

                setError(
                    result.error ||
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é"
                );
            }

            setSelectedTargetLocation(null);
            setIsTravelModalOpen(false);
            setLoading(false);
        },
        onError: (err) => {
            console.error("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –≤ –ª–æ–∫–∞—Ü–∏—é:", err);
            journalStore.addEntry(
                `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –≤ –ª–æ–∫–∞—Ü–∏—é`,
                "error"
            );
            setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –≤ –ª–æ–∫–∞—Ü–∏—é");

            setSelectedTargetLocation(null);
            setIsTravelModalOpen(false);
            setLoading(false);
        },
    });

    // useMutation –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—É—Ç–æ—Ä–∏–∞–ª–∞
    const { mutate: completeTutorial } = useMutation({
        mutationFn: ({ characterId }: { characterId: number }) =>
            axios.post("/api/characters/tutorial-completed", {
                character_id: characterId,
            }),
        onSettled: () => {
            setShowTutorial(false);
            // –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç—É—Ç–æ—Ä–∏–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
            if (characterStore.selectedCharacter) {
                queryClient.invalidateQueries({
                    queryKey: [
                        "character",
                        characterStore.selectedCharacter.id,
                    ],
                });
            }
        },
    });

    // useQuery –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
    const getLocationDetailsQuery = (locationId: number, characterId: number) =>
        useQuery({
            queryKey: ["locationDetails", locationId, characterId],
            queryFn: () =>
                locationStore.getLocationDetails(locationId, characterId),
            enabled: false, // –ó–∞–ø—Ä–æ—Å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –≤—ã–∑—ã–≤–∞–µ–º –≤—Ä—É—á–Ω—É—é
        });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–≥—Ä–æ–∫–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
    useEffect(() => {
        setLoading(true);
        setError(null);

        journalStore.addEntry("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–≥—Ä–æ–≤–æ–≥–æ –º–∏—Ä–∞...", "system");

        if (!characterStore.selectedCharacter) {
            if (charactersData && characterStore.characters.length > 0) {
                // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂, –≤—ã–±–∏—Ä–∞–µ–º –µ–≥–æ
                const activeCharacter = characterStore.characters.find(
                    (char) => char.is_active
                );
                if (activeCharacter) {
                    characterStore.selectCharacter(activeCharacter);
                } else {
                    // –ò–Ω–∞—á–µ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                    characterStore.selectCharacter(
                        characterStore.characters[0]
                    );
                }
            } else if (charactersError) {
                journalStore.addEntry("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", "error");
                setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞");
                setLoading(false);
            } else if (
                !charactersLoading &&
                characterStore.characters.length === 0
            ) {
                journalStore.addEntry(
                    "–£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É."
                );
                setLoading(false);
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π
        if (locationsData && characterStore.selectedCharacter) {
            if (
                locationsData.availableLocations &&
                locationsData.availableLocations.length > 0
            ) {
                setActiveLocation(
                    locationsData.currentLocation as Location | null
                );

                // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏, –Ω–æ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é
                if (
                    !locationsData.currentLocation &&
                    locationStore.availableLocations.length > 0
                ) {
                    setActiveLocation(locationStore.availableLocations[0]);
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª –æ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏
                if (locationsData.currentLocation) {
                    journalStore.addEntry(
                        `–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ª–æ–∫–∞—Ü–∏–∏ ${locationsData.currentLocation.name}`,
                        "location"
                    );
                }
            } else {
                console.warn("–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ª–æ–∫–∞—Ü–∏–π");
                journalStore.addEntry(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏",
                    "error"
                );
            }
        } else if (locationsError) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–∫–∞—Ü–∏–π:", locationsError);
            setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–∫–∞—Ü–∏–π");
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        if (connectionsData && connectionsData.length > 0) {
            setLocationConnections(connectionsData);
        } else if (connectionsError) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:", connectionsError);
            journalStore.addEntry(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –º–µ–∂–¥—É –ª–æ–∫–∞—Ü–∏—è–º–∏",
                "error"
            );
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        if (characterStore.selectedCharacter?.is_new) {
            journalStore.addEntry(
                `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –≠—Ö–æ –ó–∞–±–≤–µ–Ω–∏—è, ${characterStore.selectedCharacter.name}! –≠—Ç–æ –≤–∞—à–µ –ø–µ—Ä–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ.`,
                "system"
            );

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—É—á–∞—é—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            setShowTutorial(true);

            journalStore.addEntry(
                "–í–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è. –ò—Å—Å–ª–µ–¥—É–π—Ç–µ –º–∏—Ä, –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏ –æ—Å—Ç–µ—Ä–µ–≥–∞–π—Ç–µ—Å—å –æ–ø–∞—Å–Ω–æ—Å—Ç–µ–π.",
                "system"
            );
        }

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ false, –∫–æ–≥–¥–∞ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
        if (!charactersLoading && !locationsLoading && !connectionsLoading) {
            setLoading(false);
        }
    }, [
        charactersData,
        charactersLoading,
        charactersError,
        locationsData,
        locationsLoading,
        locationsError,
        connectionsData,
        connectionsLoading,
        connectionsError,
    ]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏
    const handleLocationSelect = async (location: Location) => {
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏ —Ç–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        if (
            !characterStore.selectedCharacter ||
            !locationStore.currentLocation
        ) {
            console.error(
                "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è: –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–ª–∏ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏"
            );
            return;
        }

        // –ï—Å–ª–∏ –ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–∫–∞–∂–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
        if (!location.is_accessible) {
            setSelectedLocation(location);
            setIsRequirementsModalOpen(true);
            return;
        }

        // –ï—Å–ª–∏ –ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–∑ —Ç–µ–∫—É—â–µ–π, –ø–æ–∫–∞–∂–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if (!location.is_accessible_from_current) {
            return;
        }

        // –ü–æ–∏—Å–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –º–µ–∂–¥—É –ª–æ–∫–∞—Ü–∏—è–º–∏
        const connections = locationConnections;

        if (connections.length === 0) {
            console.warn("–ú–∞—Å—Å–∏–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø—É—Å—Ç! –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...");
            try {
                const loadedConnections =
                    await locationStore.loadLocationConnections();
                if (loadedConnections.length > 0) {
                    setLocationConnections(loadedConnections);
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –Ω–æ–≤—ã–º–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
                    const newConnection = loadedConnections.find(
                        (conn) =>
                            (conn.from_location_id ===
                                locationStore.currentLocation?.id &&
                                conn.to_location_id === location.id) ||
                            (conn.is_bidirectional &&
                                conn.from_location_id === location.id &&
                                conn.to_location_id ===
                                    locationStore.currentLocation?.id)
                    );

                    if (newConnection) {
                        handleTravelSetup(newConnection, location);
                        return;
                    }
                }
            } catch (error) {
                console.error(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:",
                    error
                );
            }
        }

        // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        const connection = connections.find(
            (conn) =>
                (conn.from_location_id === locationStore.currentLocation?.id &&
                    conn.to_location_id === location.id) ||
                (conn.is_bidirectional &&
                    conn.from_location_id === location.id &&
                    conn.to_location_id === locationStore.currentLocation?.id)
        );

        if (!connection) {
            console.warn(
                `–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É –ª–æ–∫–∞—Ü–∏—è–º–∏ ${locationStore.currentLocation?.id} –∏ ${location.id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`,
                "–ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10 —Å–µ–∫—É–Ω–¥."
            );
        }

        handleTravelSetup(connection, location);
    };

    // –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è
    const handleTravelSetup = (
        connection: LocationConnection | undefined,
        location: Location
    ) => {
        // –ü–æ–ª—É—á–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        const characterSpeed = characterStore.selectedCharacter!.speed || 10;

        // –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∏–∑ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        let baseTravelTime = connection ? connection.travel_time : 10;

        // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        // –ù–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞: max(3, time - time*(1 - speed/100))
        const speedModifier = characterSpeed / 100;
        let calculatedTime = Math.round(
            baseTravelTime - baseTravelTime * speedModifier
        );

        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è - 3 —Å–µ–∫—É–Ω–¥—ã
        const finalTravelTime = Math.max(3, calculatedTime);

        // –†–∞—Å—á–µ—Ç —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        const savedTime = baseTravelTime - finalTravelTime;

        // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –ª–æ–∫–∞—Ü–∏–∏
        setIsLocationPreloaded(false);
        setSelectedTargetLocation(location);
        setTravelTime(finalTravelTime);
        setBaseTravelTime(baseTravelTime);
        setSavedTime(savedTime);
        setIsTravelModalOpen(true);

        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º React Query
        if (characterStore.selectedCharacter) {
            queryClient
                .prefetchQuery({
                    queryKey: [
                        "locationDetails",
                        location.id,
                        characterStore.selectedCharacter.id,
                    ],
                    queryFn: () =>
                        locationStore.getLocationDetails(
                            location.id,
                            characterStore.selectedCharacter!.id
                        ),
                    staleTime: 5 * 60 * 1000, // –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
                })
                .then(() => {
                    setIsLocationPreloaded(true);
                })
                .catch((error: unknown) => {
                    console.error(
                        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–∏:",
                        error
                    );
                });
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    const completeTravelToLocation = async () => {
        if (!characterStore.selectedCharacter || !selectedTargetLocation) {
            setIsTravelModalOpen(false);
            return;
        }

        setLoading(true);
        moveToLocation({
            characterId: characterStore.selectedCharacter.id,
            locationId: selectedTargetLocation.id,
        });

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        queryClient.invalidateQueries({
            queryKey: ["character", characterStore.selectedCharacter.id],
        });
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è
    const cancelTravel = () => {
        setSelectedTargetLocation(null);
        setIsTravelModalOpen(false);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
    const handleExplore = () => {
        if (!activeLocation) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏
        if (
            characterStore.selectedCharacter &&
            characterStore.selectedCharacter.stamina < 5
        ) {
            journalStore.addEntry(
                "–í—ã —Å–ª–∏—à–∫–æ–º —É—Å—Ç–∞–ª–∏ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è. –û—Ç–¥–æ—Ö–Ω–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.",
                "system"
            );
            return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–∞—á–∞–ª–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        journalStore.addEntry(
            `–í—ã –∏—Å—Å–ª–µ–¥—É–µ—Ç–µ –ª–æ–∫–∞—Ü–∏—é ${activeLocation.name}`,
            "location"
        );

        // –®–∞–Ω—Å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å –≤—Ä–∞–≥–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ª–æ–∫–∞—Ü–∏–∏
        const encounterChance = activeLocation.danger_level * 0.1; // 0.1 - 0.5 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (1-5)

        // –®–∞–Ω—Å –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç
        const itemChance = 0.35;

        // –®–∞–Ω—Å –Ω–∞–π—Ç–∏ —Ä–µ—Å—É—Ä—Å
        const resourceChance = 0.25;

        // –®–∞–Ω—Å –Ω–∞–π—Ç–∏ –æ—Å–æ–±–æ–µ –º–µ—Å—Ç–æ
        const specialPlaceChance = 0.15;

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        const roll = Math.random();

        if (roll < encounterChance) {
            // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—Ä–∞–≥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
            const locationId = activeLocation.id.toString();
            const enemies = locationEnemies[locationId] || [];

            if (enemies.length > 0) {
                const randomEnemy =
                    enemies[Math.floor(Math.random() * enemies.length)];
                journalStore.addEntry(
                    `–í—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å ${randomEnemy.name}!`,
                    "combat"
                );
                setCurrentEnemy(randomEnemy);
                setIsCombatModalOpen(true);
            } else {
                // –ù–µ—Ç –≤—Ä–∞–≥–æ–≤ –≤ —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏ - –Ω–∞—Ö–æ–¥–∏–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
                handleFindRandomItem();
            }
        } else if (roll < encounterChance + itemChance) {
            // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–º–µ—Ç
            handleFindRandomItem();
        } else if (roll < encounterChance + itemChance + resourceChance) {
            // –ù–∞—Ö–æ–¥–∏–º —Ä–µ—Å—É—Ä—Å —Å –ø–æ–º–æ—â—å—é CharacterStore
            const randomResource = characterStore.getRandomResource();
            journalStore.addEntry(
                `–í—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ —Ä–µ—Å—É—Ä—Å: ${randomResource}`,
                "item"
            );
        } else if (
            roll <
            encounterChance + itemChance + resourceChance + specialPlaceChance
        ) {
            // –ù–∞—Ö–æ–¥–∏–º –æ—Å–æ–±–æ–µ –º–µ—Å—Ç–æ
            const places = [
                "–¥—Ä–µ–≤–Ω–∏–π –∞–ª—Ç–∞—Ä—å",
                "–∑–∞–±—Ä–æ—à–µ–Ω–Ω—ã–π –ª–∞–≥–µ—Ä—å",
                "—Ç–∞–π–Ω–∏–∫ –∫–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–∏—Å—Ç–æ–≤",
                "–Ω–µ–±–æ–ª—å—à—É—é –ø–µ—â–µ—Ä—É",
                "—Ä–∞–∑—Ä—É—à–µ–Ω–Ω—É—é –±–∞—à–Ω—é",
                "—Å—Ç—Ä–∞–Ω–Ω—ã–π –º–æ–Ω–æ–ª–∏—Ç",
            ];
            const randomPlace =
                places[Math.floor(Math.random() * places.length)];
            journalStore.addEntry(`–í—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ ${randomPlace}`, "location");
        } else {
            // –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—Ö–æ–¥–∏–º
            const messages = [
                "–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ –≤ —ç—Ç–æ–π —á–∞—Å—Ç–∏ –ª–æ–∫–∞—Ü–∏–∏",
                "–ó–¥–µ—Å—å –Ω–µ—Ç –Ω–∏—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ",
                "–í–∞—à–∏ –ø–æ–∏—Å–∫–∏ –Ω–µ —É–≤–µ–Ω—á–∞–ª–∏—Å—å —É—Å–ø–µ—Ö–æ–º",
                "–≠—Ç–∞ –æ–±–ª–∞—Å—Ç—å –∫–∞–∂–µ—Ç—Å—è –ø—É—Å—Ç–æ–π",
                "–í—ã –æ—Å–º–æ—Ç—Ä–µ–ª–∏—Å—å –≤–æ–∫—Ä—É–≥, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏",
            ];
            const randomMessage =
                messages[Math.floor(Math.random() * messages.length)];
            journalStore.addEntry(randomMessage, "system");
        }

        // –†–∞—Å—Ö–æ–¥—É–µ–º –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å –ø—Ä–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏
        characterStore.useResource("stamina", 5);

        // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (characterStore.selectedCharacter) {
            queryClient.invalidateQueries({
                queryKey: ["character", characterStore.selectedCharacter.id],
            });
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π –Ω–∞—Ö–æ–¥–∫–∏
    const handleFindRandomItem = () => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ CharacterStore
        const randomItem = characterStore.getRandomItem();

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª –æ –Ω–∞—Ö–æ–¥–∫–µ
        journalStore.addEntry(`–í—ã –Ω–∞—à–ª–∏ –ø—Ä–µ–¥–º–µ—Ç: ${randomItem}`, "item");

        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        alert(`–í—ã –Ω–∞—à–ª–∏: ${randomItem}`);
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –ø–æ—Å–ª–µ –±–æ—è
    const handleCombatVictory = (rewards: {
        experience: number;
        gold: number;
        items: string[];
    }) => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ CharacterStore –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        characterStore.applyBattleRewards(rewards);

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª –æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–µ
        journalStore.addEntry(
            `–í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ –±–æ—é –∏ –ø–æ–ª—É—á–∏–ª–∏ ${rewards.experience} –æ–ø—ã—Ç–∞ –∏ ${rewards.gold} –∑–æ–ª–æ—Ç–∞!`,
            "combat"
        );

        // –ï—Å–ª–∏ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Ö
        if (rewards.items.length > 0) {
            journalStore.addEntry(
                `–ü–æ–ª—É—á–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã: ${rewards.items.join(", ")}`,
                "item"
            );
        }

        // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ—Å–ª–µ –±–æ—è
        if (characterStore.selectedCharacter) {
            queryClient.invalidateQueries({
                queryKey: ["character", characterStore.selectedCharacter.id],
            });
        }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –≤ –±–æ—é
    const handleCombatDefeat = () => {
        if (!characterStore.selectedCharacter) return;

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∂—É—Ä–Ω–∞–ª –æ –ø–æ—Ä–∞–∂–µ–Ω–∏–∏
        journalStore.addEntry(
            "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –±–æ–π –∏ –ø–æ—Ç–µ—Ä—è–ª–∏ —Å–æ–∑–Ω–∞–Ω–∏–µ...",
            "combat"
        );

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–æ–π
        setIsCombatModalOpen(false);
        setTimeout(() => setCurrentEnemy(null), 300);

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if (characterStore.selectedCharacter.health <= 0) {
            characterStore.restoreResources(
                Math.ceil(characterStore.selectedCharacter.max_health * 0.1), // 10% –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è
                0,
                0
            );
        }

        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã –∏–ª–∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø–æ—Ä–∞–∂–µ–Ω–∏—è
        journalStore.addEntry(
            "–í—ã –æ—á–Ω—É–ª–∏—Å—å –∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ, –Ω–æ –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ...",
            "system"
        );

        // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ—Å–ª–µ –±–æ—è
        queryClient.invalidateQueries({
            queryKey: ["character", characterStore.selectedCharacter.id],
        });
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ª–æ–∫–∞—Ü–∏–∏
    const handleShowLocationRequirements = (location: Location) => {
        setSelectedLocation(location);
        setIsRequirementsModalOpen(true);
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ª–æ–∫–∞—Ü–∏–∏
    const checkLocationRequirements = (location: Location): boolean => {
        if (!location.requirements || location.requirements.length === 0) {
            return true;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é CharacterStore
        return location.requirements.every((req) =>
            characterStore.meetsRequirement(req)
        );
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞
    const handleObjectSelect = (object: LocationObject) => {
        if (object.type === "npc") {
            journalStore.addEntry(`–í—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ ${object.name}`, "location");
            setSelectedNpc(object);
            setIsNpcModalOpen(true);
        } else if (object.type === "monster") {
            // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ–π –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–Ω—Å—Ç—Ä–∞
            if (activeLocation) {
                const locationId = activeLocation.id.toString();
                const enemies = locationEnemies[locationId];

                if (enemies) {
                    const enemy = enemies.find((e) => e.id === object.id);
                    if (enemy) {
                        journalStore.addEntry(
                            `–í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –±–æ–π —Å ${object.name}`,
                            "combat"
                        );
                        setCurrentEnemy(enemy);
                        setIsCombatModalOpen(true);
                    }
                }
            }
        } else {
            journalStore.addEntry(`–í—ã –∏—Å—Å–ª–µ–¥—É–µ—Ç–µ ${object.name}`, "location");
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—É—Ç–æ—Ä–∏–∞–ª–∞
    const handleTutorialComplete = () => {
        if (characterStore.selectedCharacter) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ CharacterStore —Å –∫–æ–ª–±—ç–∫–æ–º –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏
            characterStore.completeTutorial(
                characterStore.selectedCharacter.id,
                () => {
                    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—É—Ç–æ—Ä–∏–∞–ª–∞
                    queryClient.invalidateQueries({
                        queryKey: [
                            "character",
                            characterStore.selectedCharacter!.id,
                        ],
                    });
                    setShowTutorial(false);
                }
            );
        } else {
            setShowTutorial(false);
        }
    };

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    if (loading) {
        return (
            <div className="fixed inset-0 bg-black flex items-center justify-center">
                <div className="flex flex-col items-center">
                    <div className="relative">
                        <div className="h-16 w-16 animate-spin rounded-full border-t-4 border-red-600"></div>
                        <div className="absolute inset-0 flex items-center justify-center">
                            <div className="h-10 w-10 rounded-full bg-black"></div>
                        </div>
                    </div>
                    <p className="mt-4 text-xl font-medieval text-red-600">
                        –ó–∞–≥—Ä—É–∑–∫–∞ –º–∏—Ä–∞...
                    </p>
                </div>
            </div>
        );
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—à–∏–±–∫—É
    if (error || !characterStore.selectedCharacter) {
        return (
            <div className="fixed inset-0 bg-black flex items-center justify-center">
                <div className="max-w-md p-6 bg-gray-900 border border-red-900/40 rounded-lg shadow-xl">
                    <h2 className="text-xl text-red-500 mb-4">–û—à–∏–±–∫–∞</h2>
                    <p className="text-gray-400 mb-6">
                        {error ||
                            "–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."}
                    </p>
                    <div className="flex justify-center">
                        <Button variant="primary" onClick={() => navigate("/")}>
                            <span className="mr-2">üè∞</span> –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞
                            –≥–ª–∞–≤–Ω—É—é
                        </Button>
                    </div>
                </div>
            </div>
        );
    }

    const character = characterStore.selectedCharacter;

    return (
        <div className="fixed inset-0 bg-gray-900 flex flex-col overflow-hidden">
            {/* –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ */}
            <GameHeader activeLocationName={activeLocation?.name} />

            {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
            <div className="flex-1 flex">
                {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π */}
                <div className="w-60 bg-gradient-to-b from-gray-800 to-gray-900 border-r border-red-900/50 overflow-y-auto flex flex-col shadow-lg">
                    <div className="p-3 border-b border-red-900/40 bg-gray-900">
                        <h3 className="text-red-500 text-sm font-medieval uppercase tracking-wider text-center">
                            –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
                        </h3>

                        {activeLocation?.region && (
                            <div className="mt-2 flex items-center justify-center">
                                <div className="px-3 py-1 bg-gray-800/70 rounded-md border border-red-900/30">
                                    <div className="flex items-center">
                                        {activeLocation.region.icon && (
                                            <img
                                                src={getImageUrl(
                                                    activeLocation.region.icon
                                                )}
                                                alt={activeLocation.region.name}
                                                className="w-4 h-4 mr-2"
                                                onError={(
                                                    e: React.SyntheticEvent<HTMLImageElement>
                                                ) => {
                                                    (
                                                        e.target as HTMLImageElement
                                                    ).src =
                                                        window.location.origin +
                                                        "/images/icons/region-default.png";
                                                }}
                                            />
                                        )}
                                        <span className="text-xs text-gray-400">
                                            –¢–µ–∫—É—â–∏–π —Ä–µ–≥–∏–æ–Ω:{" "}
                                            <span className="text-red-400">
                                                {activeLocation.region.name}
                                            </span>
                                        </span>
                                    </div>
                                </div>
                            </div>
                        )}
                    </div>
                    <div className="p-2 space-y-2 flex-1 game-panel overflow-y-auto">
                        {locationStore.availableLocations
                            .filter(
                                (location) =>
                                    location.is_accessible_from_current &&
                                    !location.is_current
                            )
                            .map((location) => (
                                <LocationItem
                                    key={location.id}
                                    location={location}
                                    onClick={handleLocationSelect}
                                    isActive={
                                        activeLocation?.id === location.id
                                    }
                                    onShowRequirements={
                                        handleShowLocationRequirements
                                    }
                                />
                            ))}
                        {locationStore.availableLocations.filter(
                            (location) =>
                                location.is_accessible_from_current &&
                                !location.is_current
                        ).length === 0 && (
                            <div className="text-sm text-gray-500 text-center p-4">
                                <div className="font-medieval text-red-500">
                                    –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
                                </div>
                                <div className="mt-3 text-xs text-gray-500">
                                    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å—Å–ª–µ–¥—É–π—Ç–µ —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é,
                                    —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—É—Ç—å –≤ –Ω–æ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏
                                </div>
                                {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å */}
                                <div className="mt-4 text-xs text-gray-600 border-t border-gray-800 pt-2">
                                    <div>
                                        –í—Å–µ–≥–æ –ª–æ–∫–∞—Ü–∏–π:{" "}
                                        {
                                            locationStore.availableLocations
                                                .length
                                        }
                                    </div>
                                    <div>
                                        –¢–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è:{" "}
                                        {activeLocation?.name || "–ù–µ—Ç"}
                                    </div>
                                    <div className="mt-1 text-left">
                                        <div className="text-xs font-bold text-gray-500 mb-1">
                                            –í—Å–µ –ª–æ–∫–∞—Ü–∏–∏:
                                        </div>
                                        {locationStore.availableLocations.map(
                                            (loc) => (
                                                <div
                                                    key={loc.id}
                                                    className="text-left px-2 text-xs text-gray-600 border-b border-gray-800 pb-1 mb-1"
                                                >
                                                    <div>
                                                        {loc.name} (ID: {loc.id}
                                                        )
                                                    </div>
                                                    <div className="ml-2">
                                                        {loc.is_current && (
                                                            <span className="text-blue-500">
                                                                –¢–µ–∫—É—â–∞—è
                                                            </span>
                                                        )}
                                                        {loc.is_accessible_from_current ? (
                                                            <span className="text-green-500 ml-2">
                                                                –î–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è
                                                                –ø–µ—Ä–µ—Ö–æ–¥–∞
                                                            </span>
                                                        ) : (
                                                            <span className="text-red-500 ml-2">
                                                                –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è
                                                                –ø–µ—Ä–µ—Ö–æ–¥–∞
                                                            </span>
                                                        )}
                                                    </div>
                                                </div>
                                            )
                                        )}
                                    </div>
                                </div>
                            </div>
                        )}
                    </div>

                    <div className="p-3 border-t border-red-900/40 mt-auto bg-gray-900/70">
                        <Button
                            variant="secondary"
                            size="sm"
                            className="w-full text-xs flex items-center justify-center"
                            onClick={() =>
                                navigate(`/character/${character.id}`)
                            }
                        >
                            <ProfileIcon
                                className="text-gray-400 mr-2"
                                size={16}
                            />
                            –ü—Ä–æ—Ñ–∏–ª—å
                        </Button>
                    </div>
                </div>

                {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ */}
                <div className="flex-1 flex flex-col relative">
                    {/* –§–æ–Ω –ª–æ–∫–∞—Ü–∏–∏ */}
                    <div className="absolute inset-0 z-0">
                        <img
                            src={getImageUrl(
                                activeLocation?.image_url ||
                                    "/images/locations/fallback_location.jpg"
                            )}
                            alt={activeLocation?.name || "–õ–æ–∫–∞—Ü–∏—è"}
                            className="w-full h-full object-cover opacity-90"
                            onError={(
                                e: React.SyntheticEvent<HTMLImageElement>
                            ) => {
                                (e.target as HTMLImageElement).src =
                                    window.location.origin +
                                    "/images/locations/fallback_location.jpg";
                            }}
                        />
                        <div className="absolute inset-0 bg-gradient-to-t from-gray-900 via-gray-900/40 to-transparent"></div>
                    </div>

                    {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –≤ —Ä–∞–º–∫–µ */}
                    <div className="absolute top-4 left-1/2 transform -translate-x-1/2 z-10 bg-gray-900/70 px-6 py-4 rounded-lg border border-red-900/50 shadow-md max-w-2xl">
                        <h2 className="text-2xl text-red-400 font-medieval drop-shadow-lg text-center">
                            {activeLocation?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ"}
                        </h2>
                        <p className="text-sm text-gray-300 mt-2 text-center">
                            {activeLocation?.description ||
                                "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"}
                        </p>
                    </div>

                    {/* –ö–æ–Ω—Ç—Ä–æ–ª—å –ª–æ–∫–∞—Ü–∏–∏ */}
                    <div className="mt-auto p-4 z-10 bg-gray-900/40 border-t border-red-900/30">
                        <div className="flex justify-between max-w-md mx-auto">
                            <Button
                                variant="primary"
                                size="sm"
                                className="flex items-center"
                                onClick={handleExplore}
                            >
                                <ExploreIcon
                                    className="text-gray-300 mr-2"
                                    size={16}
                                />
                                –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å
                            </Button>

                            <Button
                                variant="secondary"
                                size="sm"
                                className="flex items-center"
                            >
                                <LeaveIcon
                                    className="text-gray-300 mr-2"
                                    size={16}
                                />
                                –ü–æ–∫–∏–Ω—É—Ç—å –ª–æ–∫–∞—Ü–∏—é
                            </Button>
                        </div>
                    </div>
                </div>

                {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –û–±—ä–µ–∫—Ç—ã –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏ */}
                <div className="w-64 bg-gradient-to-b from-gray-800 to-gray-900 border-l border-red-900/50 overflow-y-auto flex flex-col shadow-lg">
                    <div className="p-3 border-b border-red-900/40 bg-gray-900">
                        <h3 className="text-red-500 text-sm font-medieval uppercase tracking-wider text-center">
                            –û–±—ä–µ–∫—Ç—ã
                        </h3>
                    </div>
                    <div className="p-2 flex-1 space-y-1 game-panel overflow-y-auto">
                        {activeLocation?.objects ? (
                            activeLocation.objects.map((object, index) => (
                                <GameObjectItem
                                    key={`${object.id}-${index}`}
                                    object={object}
                                    onClick={handleObjectSelect}
                                />
                            ))
                        ) : (
                            <div className="text-sm text-gray-500 text-center p-4">
                                –í —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤
                            </div>
                        )}
                    </div>
                </div>
            </div>

            {/* –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å - –ß–∞—Ç –∏ –ª–æ–≥–∏ */}
            <div className="h-36 bg-gradient-to-t from-gray-900 to-gray-800 border-t border-red-900/60 flex shadow-inner">
                <div className="flex-1 border-r border-red-900/40 p-3 flex flex-col">
                    <div className="text-xs text-gray-400 mb-1 font-medieval">
                        –°–æ–æ–±—â–µ–Ω–∏—è:
                    </div>
                    <div className="flex-1 overflow-y-auto text-xs space-y-1 pb-2 bg-gray-900/70 p-2 rounded-md border border-red-900/30 mb-1 game-panel">
                        <div className="text-red-500">
                            <strong>[–°–∏—Å—Ç–µ–º–∞]</strong> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä
                            Echoes of Oblivion!
                        </div>
                        <div className="text-yellow-500">
                            <strong>[–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ]</strong> –í—ã –≤–æ—à–ª–∏ –≤ –æ–ø–∞—Å–Ω—É—é
                            –∑–æ–Ω—É. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã.
                        </div>
                        <div className="text-gray-400">
                            <strong>[–°—Ç–∞—Ä–µ–π—à–∏–Ω–∞ –ò—Ä–º–µ–ª—å]</strong> –Ø –∂–¥–∞–ª–∞ —Ç–µ–±—è,
                            –ø—É—Ç–Ω–∏–∫. –£ –º–µ–Ω—è –µ—Å—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ç–µ–±—è...
                        </div>
                    </div>

                    <div className="flex">
                        <input
                            type="text"
                            className="flex-1 bg-gray-800 border border-gray-700 text-gray-300 text-xs py-1.5 px-3 rounded-l-md focus:outline-none focus:border-red-900"
                            placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                        />
                        <button className="bg-red-900 text-gray-200 px-4 py-1.5 text-xs rounded-r-md hover:bg-red-800 border border-red-800">
                            –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                        </button>
                    </div>
                </div>

                <div className="w-64 p-3 flex flex-col">
                    <div className="flex items-center justify-between mb-1">
                        <div className="text-xs text-gray-400 font-medieval">
                            –ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π:
                        </div>
                        <div className="flex space-x-1">
                            <button
                                className="text-xs text-gray-500 hover:text-gray-300 transition-colors focus:outline-none"
                                title="–û–±–Ω–æ–≤–∏—Ç—å –∂—É—Ä–Ω–∞–ª"
                                onClick={() => {
                                    journalStore.addEntry(
                                        "–ñ—É—Ä–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω",
                                        "system"
                                    );
                                }}
                            >
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    className="h-3.5 w-3.5"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    stroke="currentColor"
                                >
                                    <path
                                        strokeLinecap="round"
                                        strokeLinejoin="round"
                                        strokeWidth={2}
                                        d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                                    />
                                </svg>
                            </button>
                            <button
                                className="text-xs text-gray-500 hover:text-red-400 transition-colors focus:outline-none"
                                title="–û—á–∏—Å—Ç–∏—Ç—å –∂—É—Ä–Ω–∞–ª"
                                onClick={() => {
                                    if (confirm("–û—á–∏—Å—Ç–∏—Ç—å –∂—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π?")) {
                                        journalStore.clearJournal();
                                        journalStore.addEntry(
                                            "–ñ—É—Ä–Ω–∞–ª –æ—á–∏—â–µ–Ω",
                                            "system"
                                        );
                                    }
                                }}
                            >
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    className="h-3.5 w-3.5"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    stroke="currentColor"
                                >
                                    <path
                                        strokeLinecap="round"
                                        strokeLinejoin="round"
                                        strokeWidth={2}
                                        d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
                                    />
                                </svg>
                            </button>
                        </div>
                    </div>
                    <div className="flex-1 overflow-y-auto text-xs bg-gray-900/70 p-2 rounded-md border border-red-900/30 game-panel">
                        {journalStore.getLastEntries(15).map((entry) => (
                            <JournalEntryItem key={entry.id} entry={entry} />
                        ))}
                        {journalStore.entries.length === 0 && (
                            <div className="text-gray-600 text-center p-2">
                                –ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π –ø—É—Å—Ç
                            </div>
                        )}
                    </div>
                </div>
            </div>

            {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π */}
            {selectedNpc && (
                <NpcInteractionModal
                    isOpen={isNpcModalOpen}
                    onClose={() => setIsNpcModalOpen(false)}
                    npc={{
                        id: selectedNpc.id,
                        name: selectedNpc.name,
                        type: selectedNpc.type,
                    }}
                />
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –±–æ—è */}
            {currentEnemy && characterStore.selectedCharacter && (
                <CombatModal
                    isOpen={isCombatModalOpen}
                    onClose={() => {
                        setIsCombatModalOpen(false);
                        // –°–±—Ä–æ—Å –≤—Ä–∞–≥–∞ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π,
                        // —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –≥–ª—é–∫–æ–≤ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
                        setTimeout(() => setCurrentEnemy(null), 300);
                    }}
                    onVictory={handleCombatVictory}
                    onDefeat={handleCombatDefeat}
                    enemy={currentEnemy}
                    character={{
                        id: characterStore.selectedCharacter.id,
                        name: characterStore.selectedCharacter.name,
                        health: characterStore.selectedCharacter.health,
                        maxHealth: characterStore.selectedCharacter.max_health,
                        mana: characterStore.selectedCharacter.mana,
                        maxMana: characterStore.selectedCharacter.max_mana,
                        stamina: characterStore.selectedCharacter.stamina,
                        maxStamina:
                            characterStore.selectedCharacter.max_stamina,
                        strength: characterStore.selectedCharacter.strength,
                        agility: characterStore.selectedCharacter.agility,
                        intelligence:
                            characterStore.selectedCharacter.intelligence,
                    }}
                />
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –ª–æ–∫–∞—Ü–∏–∏ */}
            <LocationRequirementsModal
                isOpen={isRequirementsModalOpen}
                onClose={() => setIsRequirementsModalOpen(false)}
                location={selectedLocation}
            />

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è */}
            {activeLocation && selectedTargetLocation && (
                <TravelModal
                    isOpen={isTravelModalOpen}
                    fromLocation={activeLocation}
                    toLocation={selectedTargetLocation}
                    travelTime={travelTime}
                    baseTravelTime={baseTravelTime}
                    savedTime={savedTime}
                    onComplete={completeTravelToLocation}
                    onCancel={cancelTravel}
                    isLocationPreloaded={isLocationPreloaded}
                />
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ */}
            {characterStore.selectedCharacter && (
                <TutorialModal
                    isOpen={showTutorial}
                    onClose={handleTutorialComplete}
                    characterName={characterStore.selectedCharacter.name}
                    characterId={characterStore.selectedCharacter.id}
                />
            )}
        </div>
    );
});

export default GameInterfaceWithQueryProvider;
