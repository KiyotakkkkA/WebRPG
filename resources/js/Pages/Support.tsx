import React, { useState, useEffect } from "react";
import MainLayout from "../Layouts/MainLayout";
import { Link } from "react-router-dom";
import axios from "axios";
import authStore from "../stores/AuthStore";
import characterStore from "../stores/CharacterStore";

// –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
const Divider = () => (
    <div className="flex items-center justify-center my-6">
        <div className="w-1/4 h-0.5 bg-gradient-to-r from-transparent to-red-800/30"></div>
        <div className="mx-4 text-red-600">‚ùñ</div>
        <div className="w-1/4 h-0.5 bg-gradient-to-l from-transparent to-red-800/30"></div>
    </div>
);

// –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
const SectionTitle = ({ children }: { children: React.ReactNode }) => (
    <div className="text-center mb-8">
        <h2 className="text-red-500 text-2xl font-medieval tracking-wider inline-block relative">
            {children}
        </h2>
        <div className="h-0.5 w-3/4 mx-auto mt-2 bg-gradient-to-r from-transparent via-red-700/40 to-transparent"></div>
    </div>
);

// –¢–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
const supportTypes = [
    {
        value: "question",
        label: "–í–æ–ø—Ä–æ—Å",
        icon: "‚ùì",
        description: "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏",
    },
    {
        value: "bug",
        label: "–ë–∞–≥-—Ä–µ–ø–æ—Ä—Ç",
        icon: "üêû",
        description: "–°–æ–æ–±—â–∏—Ç—å –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –±–∞–≥–µ –∏–ª–∏ –æ—à–∏–±–∫–µ",
    },
    {
        value: "suggestion",
        label: "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
        icon: "üí°",
        description: "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ –∏–ª–∏ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é",
    },
    {
        value: "account",
        label: "–ü—Ä–æ–±–ª–µ–º—ã —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º",
        icon: "üîí",
        description: "–ü—Ä–æ–±–ª–µ–º—ã —Å –≤—Ö–æ–¥–æ–º, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é",
    },
    {
        value: "other",
        label: "–î—Ä—É–≥–æ–µ",
        icon: "üìù",
        description: "–ò–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ",
    },
];

// –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
const FormInput = ({
    id,
    label,
    type = "text",
    placeholder,
    value,
    onChange,
    required = false,
    error = null,
    hint = null,
    readOnly = false,
}: {
    id: string;
    label: string;
    type?: string;
    placeholder?: string;
    value: string;
    onChange: (
        e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
    ) => void;
    required?: boolean;
    error?: string | null;
    hint?: string | null;
    readOnly?: boolean;
}) => (
    <div className="mb-5">
        <label htmlFor={id} className="block text-gray-300 mb-2 font-medieval">
            {label} {required && <span className="text-red-500">*</span>}
        </label>
        {type === "textarea" ? (
            <textarea
                id={id}
                value={value}
                onChange={onChange}
                placeholder={placeholder}
                className={`w-full bg-gray-900/70 border ${
                    error ? "border-red-500" : "border-gray-700"
                } rounded-md p-3 text-gray-300 focus:outline-none focus:ring-2 focus:ring-red-900/50 focus:border-red-800/50 transition-all shadow-inner ${
                    readOnly ? "opacity-70 cursor-not-allowed" : ""
                }`}
                rows={5}
                required={required}
                readOnly={readOnly}
            />
        ) : (
            <input
                id={id}
                type={type}
                value={value}
                onChange={onChange}
                placeholder={placeholder}
                className={`w-full bg-gray-900/70 border ${
                    error ? "border-red-500" : "border-gray-700"
                } rounded-md p-3 text-gray-300 focus:outline-none focus:ring-2 focus:ring-red-900/50 focus:border-red-800/50 transition-all shadow-inner ${
                    readOnly ? "opacity-70 cursor-not-allowed" : ""
                }`}
                required={required}
                readOnly={readOnly}
            />
        )}
        {error && <p className="mt-1 text-red-500 text-sm">{error}</p>}
        {hint && <p className="mt-1 text-gray-500 text-xs">{hint}</p>}
    </div>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
const CharacterSelector = ({
    id,
    label,
    value,
    onChange,
    characters,
    required = false,
    error = null,
    hint = null,
}: {
    id: string;
    label: string;
    value: string;
    onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;
    characters: Array<{ id: number; name: string }>;
    required?: boolean;
    error?: string | null;
    hint?: string | null;
}) => (
    <div className="mb-5">
        <label htmlFor={id} className="block text-gray-300 mb-2 font-medieval">
            {label} {required && <span className="text-red-500">*</span>}
        </label>
        <select
            id={id}
            value={value}
            onChange={onChange}
            className={`w-full bg-gray-900/70 border ${
                error ? "border-red-500" : "border-gray-700"
            } rounded-md p-3 text-gray-300 focus:outline-none focus:ring-2 focus:ring-red-900/50 focus:border-red-800/50 transition-all shadow-inner appearance-none`}
            required={required}
        >
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</option>
            {characters.map((char) => (
                <option key={char.id} value={char.name}>
                    {char.name}
                </option>
            ))}
        </select>
        {error && <p className="mt-1 text-red-500 text-sm">{error}</p>}
        {hint && <p className="mt-1 text-gray-500 text-xs">{hint}</p>}
    </div>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
const SupportTypeSelection = ({
    selectedType,
    onSelect,
}: {
    selectedType: string;
    onSelect: (type: string) => void;
}) => (
    <div className="grid grid-cols-2 md:grid-cols-5 gap-3 mb-6">
        {supportTypes.map((type) => (
            <div
                key={type.value}
                className={`p-2 rounded-lg border cursor-pointer transition-all duration-200 ${
                    selectedType === type.value
                        ? "bg-red-900/20 border-red-800/50 shadow-inner shadow-red-900/10"
                        : "bg-gray-800/50 border-gray-700/50 hover:bg-gray-800/80"
                }`}
                onClick={() => onSelect(type.value)}
            >
                <div className="flex flex-col items-center text-center">
                    <div className="flex-shrink-0 w-6 h-6 rounded-full bg-gray-900/80 flex items-center justify-center mb-1 shadow">
                        <span className="text-sm">{type.icon}</span>
                    </div>
                    <h3
                        className={`font-medieval text-xs ${
                            selectedType === type.value
                                ? "text-red-400"
                                : "text-gray-300"
                        }`}
                    >
                        {type.label}
                    </h3>
                    <p className="text-gray-500 text-xs hidden md:block">
                        {type.description}
                    </p>
                </div>
            </div>
        ))}
    </div>
);

const Support: React.FC = () => {
    const [selectedType, setSelectedType] = useState<string>("question");
    const [name, setName] = useState<string>("");
    const [email, setEmail] = useState<string>("");
    const [message, setMessage] = useState<string>("");
    const [character, setCharacter] = useState<string>("");

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [submitSuccess, setSubmitSuccess] = useState(false);
    const [submitError, setSubmitError] = useState<string | null>(null);

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const [errors, setErrors] = useState<{ [key: string]: string }>({});

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    // –∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    useEffect(() => {
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–º—è –∏ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ authStore (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
        if (
            !authStore.isLoading &&
            authStore.isAuthenticated &&
            authStore.user
        ) {
            setName(authStore.user.name || "");
            setEmail(authStore.user.email || "");
        }
    }, [authStore.isLoading, authStore.isAuthenticated, authStore.user]);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    useEffect(() => {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        if (!authStore.isLoading && authStore.isAuthenticated) {
            const loadCharacters = async () => {
                try {
                    await characterStore.loadCharacters();
                } catch (error) {
                    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:", error);
                }
            };

            loadCharacters();
        }
    }, [authStore.isLoading, authStore.isAuthenticated]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();

        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—à–∏–±–æ–∫
        setErrors({});
        setSubmitError(null);

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        let hasErrors = false;
        const newErrors: { [key: string]: string } = {};

        if (!name.trim()) {
            newErrors.name = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è";
            hasErrors = true;
        }

        if (!email.trim()) {
            newErrors.email = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à email";
            hasErrors = true;
        } else if (!/^\S+@\S+\.\S+$/.test(email)) {
            newErrors.email = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email";
            hasErrors = true;
        }

        if (!message.trim()) {
            newErrors.message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ";
            hasErrors = true;
        }

        if (
            (selectedType === "bug" || selectedType === "account") &&
            !character.trim()
        ) {
            newErrors.character = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞";
            hasErrors = true;
        }

        if (hasErrors) {
            setErrors(newErrors);
            return;
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
        setIsSubmitting(true);

        try {
            // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            const formData = {
                name,
                email,
                type: selectedType,
                character_name: character || null,
                message,
            };

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            const response = await axios.post(
                "/api/support-messages",
                formData
            );

            // –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
            setSubmitSuccess(true);

            // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
            setSelectedType("question");
            // –ù–µ –æ—á–∏—â–∞–µ–º –∏–º—è –∏ email, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –±–µ—Ä—É—Ç—Å—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            setMessage("");
            setCharacter("");
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Å –æ—à–∏–±–∫–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            if (axios.isAxiosError(error) && error.response?.data?.errors) {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                setErrors(error.response.data.errors);
            } else {
                // –û–±—â–∞—è –æ—à–∏–±–∫–∞
                setSubmitError(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                );
            }
        } finally {
            setIsSubmitting(false);
        }
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    const showCharacterSelector = ["bug", "account"].includes(selectedType);

    return (
        <MainLayout>
            <div className="relative min-h-screen">
                {/* –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
                <div className="absolute inset-0 bg-[url('/images/backgrounds/menu_bg.jpg')] bg-cover bg-center opacity-30"></div>
                <div className="absolute inset-0 bg-gradient-to-t from-gray-900 via-gray-900/80 to-gray-900/60 backdrop-blur-[1px]"></div>

                {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã */}
                <div className="absolute top-10 left-10 w-20 h-20 border-t border-l border-red-700/50 animate-pulse"></div>
                <div className="absolute top-10 right-10 w-20 h-20 border-t border-r border-red-700/50 animate-pulse"></div>
                <div className="absolute bottom-10 left-10 w-20 h-20 border-b border-l border-red-700/50 animate-pulse"></div>
                <div className="absolute bottom-10 right-10 w-20 h-20 border-b border-r border-red-700/50 animate-pulse"></div>

                {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
                <div className="container max-w-4xl mx-auto px-4 py-12 relative z-10">
                    <div className="bg-gradient-to-b from-gray-800/90 to-gray-900/90 rounded-lg border border-red-900/30 shadow-xl p-8 backdrop-blur-sm relative">
                        {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —É–≥–ª—ã */}
                        <div className="absolute top-0 left-0 w-8 h-8 border-t-2 border-l-2 border-red-800/50"></div>
                        <div className="absolute top-0 right-0 w-8 h-8 border-t-2 border-r-2 border-red-800/50"></div>
                        <div className="absolute bottom-0 left-0 w-8 h-8 border-b-2 border-l-2 border-red-800/50"></div>
                        <div className="absolute bottom-0 right-0 w-8 h-8 border-b-2 border-r-2 border-red-800/50"></div>

                        <div className="text-center mb-8">
                            <h1 className="text-3xl font-medieval text-red-500 mb-2 tracking-wider">
                                –§–û–†–ú–ê –û–ë–†–ê–¢–ù–û–ô –°–í–Ø–ó–ò
                            </h1>
                            <p className="text-gray-400">
                                –ú—ã –≥–æ—Ç–æ–≤—ã –≤—ã—Å–ª—É—à–∞—Ç—å –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ—á—å —Ä–µ—à–∏—Ç—å
                                –ø—Ä–æ–±–ª–µ–º—ã
                            </p>
                        </div>

                        <Divider />

                        {submitSuccess ? (
                            <div className="text-center py-8">
                                <div className="inline-block p-4 rounded-full bg-green-900/20 border border-green-800/30 mb-4">
                                    <svg
                                        className="w-12 h-12 text-green-500"
                                        fill="none"
                                        stroke="currentColor"
                                        viewBox="0 0 24 24"
                                        xmlns="http://www.w3.org/2000/svg"
                                    >
                                        <path
                                            strokeLinecap="round"
                                            strokeLinejoin="round"
                                            strokeWidth="2"
                                            d="M5 13l4 4L19 7"
                                        ></path>
                                    </svg>
                                </div>
                                <h2 className="text-xl text-green-400 font-medieval mb-4">
                                    –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!
                                </h2>
                                <p className="text-gray-300 mb-6">
                                    –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º
                                    –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ
                                    –≤—Ä–µ–º—è.
                                </p>
                                <button
                                    className="px-6 py-2 bg-gray-800 border border-red-900/30 rounded-md text-gray-300 hover:bg-red-900/20 transition-colors"
                                    onClick={() => setSubmitSuccess(false)}
                                >
                                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                </button>
                            </div>
                        ) : (
                            <form onSubmit={handleSubmit}>
                                <SectionTitle>
                                    –í–´–ë–ï–†–ò–¢–ï –¢–ò–ü –û–ë–†–ê–©–ï–ù–ò–Ø
                                </SectionTitle>

                                <SupportTypeSelection
                                    selectedType={selectedType}
                                    onSelect={setSelectedType}
                                />

                                <SectionTitle>–í–ê–®–ï –°–û–û–ë–©–ï–ù–ò–ï</SectionTitle>

                                <div className="grid grid-cols-1 md:grid-cols-2 gap-5">
                                    <FormInput
                                        id="name"
                                        label="–í–ê–®–ï –ò–ú–Ø"
                                        value={name}
                                        onChange={(e) =>
                                            setName(e.target.value)
                                        }
                                        placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                                        required={true}
                                        error={errors.name}
                                        readOnly={authStore.isAuthenticated}
                                        hint="–ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø –ò–ú–Ø –ò–ó –í–ê–®–ï–ì–û –ê–ö–ö–ê–£–ù–¢–ê"
                                    />

                                    <FormInput
                                        id="email"
                                        label="EMAIL"
                                        type="email"
                                        value={email}
                                        onChange={(e) =>
                                            setEmail(e.target.value)
                                        }
                                        placeholder="example@mail.com"
                                        required={true}
                                        error={errors.email}
                                        readOnly={authStore.isAuthenticated}
                                        hint="–ú–´ –ò–°–ü–û–õ–¨–ó–£–ï–ú –í–ê–® EMAIL –¢–û–õ–¨–ö–û –î–õ–Ø –û–¢–í–ï–¢–ê –ù–ê –ó–ê–ü–†–û–°"
                                    />
                                </div>

                                {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º */}
                                <div className="min-h-[120px] mb-6">
                                    {/* –°–µ–ª–µ–∫—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ */}
                                    <div
                                        className={`transition-opacity duration-300 ${
                                            showCharacterSelector
                                                ? "opacity-100"
                                                : "opacity-0 absolute -z-10"
                                        }`}
                                    >
                                        <CharacterSelector
                                            id="character"
                                            label="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"
                                            value={character}
                                            onChange={(e) =>
                                                setCharacter(e.target.value)
                                            }
                                            characters={
                                                characterStore.characters || []
                                            }
                                            required={showCharacterSelector}
                                            error={errors.character}
                                            hint="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞"
                                        />
                                    </div>
                                </div>

                                <FormInput
                                    id="message"
                                    label="–°–æ–æ–±—â–µ–Ω–∏–µ"
                                    type="textarea"
                                    value={message}
                                    onChange={(e) => setMessage(e.target.value)}
                                    placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É..."
                                    required={true}
                                    error={errors.message}
                                />

                                {submitError && (
                                    <div className="p-4 bg-red-900/20 border border-red-900/40 rounded-lg mb-6 text-red-400">
                                        <div className="flex items-center">
                                            <svg
                                                className="w-6 h-6 mr-2"
                                                fill="none"
                                                stroke="currentColor"
                                                viewBox="0 0 24 24"
                                                xmlns="http://www.w3.org/2000/svg"
                                            >
                                                <path
                                                    strokeLinecap="round"
                                                    strokeLinejoin="round"
                                                    strokeWidth="2"
                                                    d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                                                ></path>
                                            </svg>
                                            {submitError}
                                        </div>
                                    </div>
                                )}

                                <div className="flex justify-between items-center mt-8">
                                    <Link
                                        to="/"
                                        className="text-gray-400 hover:text-red-400 transition-colors"
                                    >
                                        ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
                                    </Link>

                                    <button
                                        type="submit"
                                        disabled={isSubmitting}
                                        className={`px-6 py-2 bg-gradient-to-r from-red-900/80 to-red-700/80 rounded-md text-white font-medieval tracking-wide shadow-lg hover:from-red-800/80 hover:to-red-600/80 transition-colors ${
                                            isSubmitting
                                                ? "opacity-70 cursor-not-allowed"
                                                : ""
                                        }`}
                                    >
                                        {isSubmitting ? (
                                            <span className="flex items-center">
                                                <svg
                                                    className="animate-spin -ml-1 mr-2 h-4 w-4 text-white"
                                                    xmlns="http://www.w3.org/2000/svg"
                                                    fill="none"
                                                    viewBox="0 0 24 24"
                                                >
                                                    <circle
                                                        className="opacity-25"
                                                        cx="12"
                                                        cy="12"
                                                        r="10"
                                                        stroke="currentColor"
                                                        strokeWidth="4"
                                                    ></circle>
                                                    <path
                                                        className="opacity-75"
                                                        fill="currentColor"
                                                        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                                                    ></path>
                                                </svg>
                                                –û—Ç–ø—Ä–∞–≤–∫–∞...
                                            </span>
                                        ) : (
                                            "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
                                        )}
                                    </button>
                                </div>
                            </form>
                        )}
                    </div>
                </div>
            </div>
        </MainLayout>
    );
};

export default Support;
