import React, { useState } from "react";
import { Link } from "react-router-dom";
import MainLayout from "../../Layouts/MainLayout";
import axios from "../../config/axios";
import authStore from "../../stores/AuthStore";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { toast } from "react-toastify";

// –¢–∏–ø—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
interface SupportMessage {
    id: number;
    user_id: number;
    name: string;
    email: string;
    type: string;
    character_name: string | null;
    message: string;
    status: "new" | "in_progress" | "closed";
    response: string | null;
    responder_id: number | null;
    responder_name: string | null;
    on_moderation: boolean;
    moderator_id: number | null;
    created_at: string;
    updated_at: string;
    rating?: number | null;
    feedback_comment?: string | null;
    archived?: boolean;
    rated_at?: string | null;
}

// API —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
const supportApi = {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    getMessages: async (filters?: {
        status?: string;
        type?: string;
        archived?: boolean;
    }) => {
        try {
            const queryParams = new URLSearchParams();
            if (filters?.status && filters.status !== "all") {
                queryParams.append("status", filters.status);
            }
            if (filters?.type && filters.type !== "all") {
                queryParams.append("type", filters.type);
            }
            if (filters?.archived !== undefined) {
                queryParams.append("archived", filters.archived ? "1" : "0");
            }

            const url = `/api/support-messages${
                queryParams.toString() ? `?${queryParams.toString()}` : ""
            }`;
            const response = await axios.get(url);
            return response.data.data || response.data;
        } catch (error) {
            console.error("Error fetching support messages:", error);
            throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏");
        }
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    updateResponse: async (
        id: number,
        data: { response?: string; status?: string }
    ) => {
        try {
            const response = await axios.put(
                `/api/support-messages/${id}`,
                data
            );
            return response.data.support_message || response.data;
        } catch (error) {
            console.error("Error updating support message:", error);
            throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ");
        }
    },

    // –í–∑—è—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    takeForModeration: async (id: number) => {
        try {
            const response = await axios.put(
                `/api/support-messages/${id}/take-for-moderation`
            );
            return response.data.support_message || response.data;
        } catch (error) {
            console.error("Error taking message for moderation:", error);
            throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é");
        }
    },

    // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    releaseFromModeration: async (id: number) => {
        try {
            const response = await axios.put(
                `/api/support-messages/${id}/release-from-moderation`
            );
            return response.data.support_message || response.data;
        } catch (error) {
            console.error("Error releasing message from moderation:", error);
            throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏");
        }
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    getStatistics: async () => {
        try {
            const response = await axios.get(
                "/api/support-messages-statistics"
            );
            return response.data;
        } catch (error) {
            console.error("Error fetching support statistics:", error);
            throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É");
        }
    },
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏
const SectionTitle = ({ children }: { children: React.ReactNode }) => (
    <div className="border-b border-red-900/30 pb-2 mb-6 flex items-center">
        <div className="w-1 h-8 bg-red-700 mr-3"></div>
        <h2 className="text-xl font-medieval text-red-500">{children}</h2>
    </div>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
const StatusBadge = ({ status }: { status: string }) => {
    let bgColor = "";
    let textColor = "";
    let label = "";

    switch (status) {
        case "new":
            bgColor = "bg-blue-900/20";
            textColor = "text-blue-400";
            label = "–ù–æ–≤–æ–µ";
            break;
        case "in_progress":
            bgColor = "bg-yellow-900/20";
            textColor = "text-yellow-400";
            label = "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ";
            break;
        case "closed":
            bgColor = "bg-green-900/20";
            textColor = "text-green-400";
            label = "–†–µ—à–µ–Ω–æ";
            break;
        default:
            bgColor = "bg-gray-800";
            textColor = "text-gray-400";
            label = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    }

    return (
        <span
            className={`px-2 py-1 rounded text-xs ${bgColor} ${textColor} border border-gray-700`}
        >
            {label}
        </span>
    );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
const TypeBadge = ({ type }: { type: string }) => {
    let icon = "";
    let label = "";

    switch (type) {
        case "question":
            icon = "‚ùì";
            label = "–í–æ–ø—Ä–æ—Å";
            break;
        case "bug":
            icon = "üêû";
            label = "–ë–∞–≥";
            break;
        case "suggestion":
            icon = "üí°";
            label = "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ";
            break;
        case "account":
            icon = "üîí";
            label = "–ê–∫–∫–∞—É–Ω—Ç";
            break;
        default:
            icon = "üìù";
            label = "–î—Ä—É–≥–æ–µ";
    }

    return (
        <span className="inline-flex items-center gap-1">
            <span>{icon}</span>
            <span>{label}</span>
        </span>
    );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
const ModerationBadge = ({
    message,
    isArchiveMode,
}: {
    message: SupportMessage;
    isArchiveMode: boolean;
}) => {
    const isTakenByCurrentUser =
        message.on_moderation && message.moderator_id === authStore.user?.id;
    const isTakenByOtherUser =
        message.on_moderation && message.moderator_id !== authStore.user?.id;

    // –î–ª—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    if (isArchiveMode) {
        if (message.rating !== undefined && message.rating !== null) {
            const rating = message.rating as number;
            return (
                <span className="px-2 py-1 rounded text-xs bg-gray-800/50 text-yellow-400 border border-gray-700 flex items-center">
                    {[1, 2, 3, 4, 5].map((star) => (
                        <svg
                            key={star}
                            xmlns="http://www.w3.org/2000/svg"
                            className={`h-3 w-3 ${
                                star <= rating
                                    ? "text-yellow-400"
                                    : "text-gray-600"
                            }`}
                            viewBox="0 0 20 20"
                            fill="currentColor"
                        >
                            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                        </svg>
                    ))}
                </span>
            );
        } else {
            return (
                <span className="px-2 py-1 rounded text-xs bg-gray-800/50 text-gray-400 border border-gray-700">
                    –ù–µ—Ç –æ—Ü–µ–Ω–∫–∏
                </span>
            );
        }
    }

    if (isTakenByCurrentUser) {
        return (
            <span className="px-2 py-1 rounded text-xs bg-purple-900/20 text-purple-400 border border-purple-800/50">
                –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —É –≤–∞—Å
            </span>
        );
    }

    if (isTakenByOtherUser) {
        return (
            <span className="px-2 py-1 rounded text-xs bg-red-900/20 text-red-400 border border-red-800/50">
                –í–∑—è—Ç –¥—Ä—É–≥–∏–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
            </span>
        );
    }

    return (
        <span className="px-2 py-1 rounded text-xs bg-gray-800/50 text-gray-400 border border-gray-700">
            –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        </span>
    );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
const SupportStats = () => {
    const { data: stats, isLoading } = useQuery({
        queryKey: ["supportStats"],
        queryFn: supportApi.getStatistics,
        staleTime: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
    });

    if (isLoading || !stats) {
        return (
            <div className="bg-gray-800/50 rounded-lg border border-gray-800 p-4 flex gap-3 mb-6">
                <div className="h-4 w-20 bg-gray-700 animate-pulse rounded"></div>
                <div className="h-4 w-16 bg-gray-700 animate-pulse rounded"></div>
                <div className="h-4 w-24 bg-gray-700 animate-pulse rounded"></div>
            </div>
        );
    }

    return (
        <div className="bg-gray-800/50 rounded-lg border border-gray-800 p-4 flex gap-4 mb-6">
            <div className="bg-blue-900/20 border border-blue-900/30 px-3 py-1 rounded-lg">
                <span className="text-blue-400 text-sm">
                    –ù–æ–≤—ã—Ö: {stats.by_status.new}
                </span>
            </div>
            <div className="bg-yellow-900/20 border border-yellow-900/30 px-3 py-1 rounded-lg">
                <span className="text-yellow-400 text-sm">
                    –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: {stats.by_status.in_progress}
                </span>
            </div>
            <div className="bg-green-900/20 border border-green-900/30 px-3 py-1 rounded-lg">
                <span className="text-green-400 text-sm">
                    –†–µ—à–µ–Ω–æ: {stats.by_status.closed}
                </span>
            </div>
            <div className="bg-gray-800 border border-gray-700 px-3 py-1 rounded-lg">
                <span className="text-gray-300 text-sm">
                    –í—Å–µ–≥–æ: {stats.total}
                </span>
            </div>
        </div>
    );
};

const SupportMessages: React.FC = () => {
    const queryClient = useQueryClient();
    const [currentMessage, setCurrentMessage] = useState<SupportMessage | null>(
        null
    );
    const [responseText, setResponseText] = useState("");
    const [statusFilter, setStatusFilter] = useState<string>("all");
    const [typeFilter, setTypeFilter] = useState<string>("all");
    const [isArchiveMode, setIsArchiveMode] = useState<boolean>(false);
    const [isRefreshing, setIsRefreshing] = useState(false);

    // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    const {
        data: messages,
        isLoading,
        error,
        refetch,
    } = useQuery({
        queryKey: ["supportMessages", statusFilter, typeFilter, isArchiveMode],
        queryFn: () =>
            supportApi.getMessages({
                status: statusFilter,
                type: typeFilter,
                archived: isArchiveMode,
            }),
        refetchOnWindowFocus: false,
        staleTime: 60000, // –î–∞–Ω–Ω—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è "—Å–≤–µ–∂–∏–º–∏" –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã
    });

    // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –≤–∑—è—Ç–∏—è –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    const takeForModerationMutation = useMutation({
        mutationFn: (id: number) => supportApi.takeForModeration(id),
        onSuccess: (updatedMessage) => {
            queryClient.invalidateQueries({ queryKey: ["supportMessages"] });
            setCurrentMessage(updatedMessage);
            toast.success("–í—ã –≤–∑—è–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é");
        },
        onError: (error) => {
            toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é");
            console.error("Error taking message for moderation:", error);
        },
    });

    // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    const releaseFromModerationMutation = useMutation({
        mutationFn: (id: number) => supportApi.releaseFromModeration(id),
        onSuccess: (updatedMessage) => {
            queryClient.invalidateQueries({ queryKey: ["supportMessages"] });
            setCurrentMessage(updatedMessage);
            toast.success("–í–æ–ø—Ä–æ—Å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω –æ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏");
        },
        onError: (error) => {
            toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏");
            console.error("Error releasing message from moderation:", error);
        },
    });

    // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
    const updateResponseMutation = useMutation({
        mutationFn: ({
            id,
            data,
        }: {
            id: number;
            data: { response?: string; status?: string };
        }) => supportApi.updateResponse(id, data),
        onSuccess: (updatedMessage) => {
            // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            queryClient.invalidateQueries({ queryKey: ["supportMessages"] });
            queryClient.invalidateQueries({ queryKey: ["supportStats"] });
            setCurrentMessage(updatedMessage);
            toast.success("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ");
        },
        onError: (error) => {
            toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è");
            console.error("Error updating message:", error);
        },
    });

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    const forceRefresh = () => {
        // –í–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        setIsRefreshing(true);

        // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –¥–ª—è –æ–±–æ–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        queryClient.invalidateQueries({ queryKey: ["supportMessages"] });
        queryClient.invalidateQueries({ queryKey: ["supportStats"] });

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        refetch({
            throwOnError: true,
            cancelRefetch: true,
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
        if (currentMessage) {
            const updateCurrentMessage = async () => {
                try {
                    const response = await axios.get(
                        `/api/support-messages/${currentMessage.id}`
                    );
                    const updatedMessage = response.data;
                    setCurrentMessage(updatedMessage);
                    if (updatedMessage.response) {
                        setResponseText(updatedMessage.response);
                    }
                } catch (error) {
                    console.error(
                        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:",
                        error
                    );
                }
            };
            updateCurrentMessage();
        }

        toast.info("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è...");

        // –ê–Ω–∏–º–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –º–∏–Ω–∏–º—É–º 1 —Å–µ–∫—É–Ω–¥—É, –¥–∞–∂–µ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ
        setTimeout(() => {
            setIsRefreshing(false);
        }, 1000);
    };

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const openMessage = async (message: SupportMessage) => {
        try {
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            const response = await axios.get(
                `/api/support-messages/${message.id}`
            );
            const updatedMessage = response.data;
            setCurrentMessage(updatedMessage);
            setResponseText(updatedMessage.response || "");
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
            // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            setCurrentMessage(message);
            setResponseText(message.response || "");
        }
    };

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const saveResponse = async () => {
        if (!currentMessage) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (
            !currentMessage.on_moderation ||
            currentMessage.moderator_id !== authStore.user?.id
        ) {
            toast.error(
                "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –°–Ω–∞—á–∞–ª–∞ –≤–æ–∑—å–º–∏—Ç–µ –µ–≥–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é."
            );
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        updateResponseMutation.mutate({
            id: currentMessage.id,
            data: {
                response: responseText,
                status: currentMessage.status, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            },
        });

        // –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
        setTimeout(() => {
            releaseFromModerationMutation.mutate(currentMessage.id);
        }, 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–µ–Ω–∏–ª–æ—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    };

    // –í–∑—è—Ç–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    const takeMessage = async () => {
        if (!currentMessage) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (
            currentMessage.on_moderation &&
            currentMessage.moderator_id !== authStore.user?.id
        ) {
            toast.error("–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ –≤–∑—è—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –¥—Ä—É–≥–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º");
            return;
        }

        takeForModerationMutation.mutate(currentMessage.id);
    };

    // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    const releaseMessage = async () => {
        if (!currentMessage) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (
            !currentMessage.on_moderation ||
            currentMessage.moderator_id !== authStore.user?.id
        ) {
            toast.error("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å");
            return;
        }

        releaseFromModerationMutation.mutate(currentMessage.id);
    };

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const changeStatus = async (status: "new" | "in_progress" | "closed") => {
        if (!currentMessage) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (
            !currentMessage.on_moderation ||
            currentMessage.moderator_id !== authStore.user?.id
        ) {
            toast.error(
                "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –°–Ω–∞—á–∞–ª–∞ –≤–æ–∑—å–º–∏—Ç–µ –µ–≥–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é."
            );
            return;
        }

        updateResponseMutation.mutate({
            id: currentMessage.id,
            data: { status },
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        setCurrentMessage((prev) => (prev ? { ...prev, status } : null));
    };

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    const formatDate = (dateString: string) => {
        const date = new Date(dateString);
        return new Intl.DateTimeFormat("ru-RU", {
            day: "2-digit",
            month: "2-digit",
            year: "numeric",
            hour: "2-digit",
            minute: "2-digit",
        }).format(date);
    };

    // –î–æ–ø–æ–ª–Ω–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ –≤ –¥–µ—Ç–∞–ª—è—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
    const RatingDisplay = ({
        rating,
        comment,
    }: {
        rating?: number | null;
        comment?: string | null;
    }) => {
        if (!rating) return null;

        return (
            <div className="border-t border-gray-700 pt-4 mt-4">
                <h3 className="text-gray-400 mb-2 text-sm font-medieval">
                    –û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
                </h3>
                <div className="flex space-x-1 mb-2">
                    {[1, 2, 3, 4, 5].map((star) => (
                        <svg
                            key={star}
                            xmlns="http://www.w3.org/2000/svg"
                            className={`h-5 w-5 ${
                                star <= rating
                                    ? "text-yellow-400"
                                    : "text-gray-600"
                            }`}
                            viewBox="0 0 20 20"
                            fill="currentColor"
                        >
                            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                        </svg>
                    ))}
                </div>
                {comment && (
                    <div className="bg-gray-900/50 p-3 rounded-md border border-gray-800 mt-2">
                        <p className="text-sm text-gray-400">{comment}</p>
                    </div>
                )}
            </div>
        );
    };

    return (
        <MainLayout>
            <div className="relative min-h-screen">
                {/* –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
                <div className="absolute inset-0 bg-[url('/images/backgrounds/menu_bg.jpg')] bg-cover bg-center opacity-30"></div>
                <div className="absolute inset-0 bg-gradient-to-t from-gray-900 via-gray-900/80 to-gray-900/60 backdrop-blur-[1px]"></div>

                {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã */}
                <div className="absolute top-10 left-10 w-20 h-20 border-t border-l border-red-700/50 animate-pulse"></div>
                <div className="absolute top-10 right-10 w-20 h-20 border-t border-r border-red-700/50 animate-pulse"></div>
                <div className="absolute bottom-10 left-10 w-20 h-20 border-b border-l border-red-700/50 animate-pulse"></div>
                <div className="absolute bottom-10 right-10 w-20 h-20 border-b border-r border-red-700/50 animate-pulse"></div>

                <div className="container mx-auto px-4 py-8 max-w-7xl relative z-10">
                    <div className="bg-gray-900/80 backdrop-blur-sm border border-red-900/30 rounded-lg shadow-xl p-6">
                        <div className="flex justify-between items-center mb-6">
                            <h1 className="text-2xl text-gray-200 font-medieval">
                                {isArchiveMode
                                    ? "–ê—Ä—Ö–∏–≤ –∑–∞—è–≤–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
                                    : "–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏"}
                            </h1>

                            {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –º–µ–∂–¥—É –æ–±—ã—á–Ω—ã–º —Ä–µ–∂–∏–º–æ–º –∏ –∞—Ä—Ö–∏–≤–æ–º */}
                            <button
                                className={`px-4 py-2 rounded text-sm ${
                                    isArchiveMode
                                        ? "bg-gray-700 text-white"
                                        : "bg-green-900/70 text-white"
                                }`}
                                onClick={() => {
                                    setIsArchiveMode(!isArchiveMode);
                                    setCurrentMessage(null);
                                }}
                            >
                                {isArchiveMode
                                    ? "‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—ã—á–Ω—ã–º –∑–∞—è–≤–∫–∞–º"
                                    : "–ü–µ—Ä–µ–π—Ç–∏ –≤ –∞—Ä—Ö–∏–≤"}
                            </button>
                        </div>

                        <SectionTitle>
                            {isArchiveMode
                                ? "–ê–†–•–ò–í–ò–†–û–í–ê–ù–ù–´–ï –ó–ê–Ø–í–ö–ò"
                                : "–°–û–û–ë–©–ï–ù–ò–Ø"}
                        </SectionTitle>

                        {!isArchiveMode && <SupportStats />}

                        <div className="flex flex-col lg:flex-row gap-6">
                            {/* –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π */}
                            <div className="lg:w-1/2">
                                {/* –§–∏–ª—å—Ç—Ä—ã */}
                                <div className="flex flex-wrap gap-3 mb-4">
                                    <div>
                                        <label className="text-gray-400 text-xs block mb-1">
                                            –°–¢–ê–¢–£–°
                                        </label>
                                        <select
                                            className="bg-gray-800 border border-gray-700 rounded text-gray-200 text-sm p-1.5"
                                            value={statusFilter}
                                            onChange={(e) =>
                                                setStatusFilter(e.target.value)
                                            }
                                        >
                                            <option value="all">–í–°–ï</option>
                                            <option value="new">–ù–û–í–´–ï</option>
                                            <option value="in_progress">
                                                –í –û–ë–†–ê–ë–û–¢–ö–ï
                                            </option>
                                            <option value="closed">
                                                –†–ï–®–ï–ù–û
                                            </option>
                                        </select>
                                    </div>

                                    <div>
                                        <label className="text-gray-400 text-xs block mb-1">
                                            –¢–ò–ü
                                        </label>
                                        <select
                                            className="bg-gray-800 border border-gray-700 rounded text-gray-200 text-sm p-1.5"
                                            value={typeFilter}
                                            onChange={(e) =>
                                                setTypeFilter(e.target.value)
                                            }
                                        >
                                            <option value="all">–í–°–ï</option>
                                            <option value="question">
                                                –í–û–ü–†–û–°–´
                                            </option>
                                            <option value="bug">–ë–ê–ì–ò</option>
                                            <option value="suggestion">
                                                –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø
                                            </option>
                                            <option value="account">
                                                –ê–ö–ö–ê–£–ù–¢
                                            </option>
                                            <option value="other">
                                                –î–†–£–ì–û–ï
                                            </option>
                                        </select>
                                    </div>

                                    <div className="ml-auto self-end">
                                        <button
                                            className="bg-gray-800 hover:bg-gray-700 text-gray-300 text-sm py-1.5 px-3 rounded border border-gray-700 flex items-center gap-1"
                                            onClick={forceRefresh}
                                            disabled={isLoading || isRefreshing}
                                        >
                                            <svg
                                                className={`w-4 h-4 ${
                                                    isLoading || isRefreshing
                                                        ? "animate-spin"
                                                        : ""
                                                }`}
                                                fill="none"
                                                stroke="currentColor"
                                                viewBox="0 0 24 24"
                                                xmlns="http://www.w3.org/2000/svg"
                                            >
                                                <path
                                                    strokeLinecap="round"
                                                    strokeLinejoin="round"
                                                    strokeWidth="2"
                                                    d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                                                ></path>
                                            </svg>
                                            –û–ë–ù–û–í–ò–¢–¨
                                        </button>
                                    </div>
                                </div>

                                {isLoading || isRefreshing ? (
                                    <div className="flex justify-center my-8">
                                        <div className="animate-spin h-8 w-8 border-4 border-red-600 rounded-full border-t-transparent"></div>
                                    </div>
                                ) : error ? (
                                    <div className="bg-red-900/20 text-red-400 p-4 rounded-lg border border-red-900/40 my-4">
                                        {error instanceof Error
                                            ? error.message
                                            : "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö"}
                                    </div>
                                ) : !messages || messages.length === 0 ? (
                                    <div className="text-center py-8 text-gray-400">
                                        –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞–º
                                    </div>
                                ) : (
                                    <div className="space-y-3">
                                        {messages.map(
                                            (message: SupportMessage) => (
                                                <div
                                                    key={message.id}
                                                    className={`border border-gray-800 rounded-lg p-4 transition-colors cursor-pointer ${
                                                        currentMessage?.id ===
                                                        message.id
                                                            ? "bg-red-900/10 border-red-900/30"
                                                            : "bg-gray-800/40 hover:bg-gray-800/80"
                                                    }`}
                                                    onClick={() =>
                                                        openMessage(message)
                                                    }
                                                >
                                                    <div className="flex justify-between items-start mb-2">
                                                        <h3 className="font-medieval text-red-400">
                                                            {message.name}
                                                        </h3>
                                                        <div className="flex gap-2">
                                                            <StatusBadge
                                                                status={
                                                                    message.status
                                                                }
                                                            />
                                                            <ModerationBadge
                                                                message={
                                                                    message
                                                                }
                                                                isArchiveMode={
                                                                    isArchiveMode
                                                                }
                                                            />
                                                        </div>
                                                    </div>

                                                    <div className="flex items-center gap-3 text-xs text-gray-400 mb-2">
                                                        <TypeBadge
                                                            type={message.type}
                                                        />
                                                        <span>
                                                            {formatDate(
                                                                message.created_at
                                                            )}
                                                        </span>
                                                        {message.character_name && (
                                                            <span className="text-gray-500">
                                                                –ü–µ—Ä—Å–æ–Ω–∞–∂:{" "}
                                                                {
                                                                    message.character_name
                                                                }
                                                            </span>
                                                        )}
                                                    </div>

                                                    <p className="text-gray-300 text-sm line-clamp-2 mb-1">
                                                        {message.message}
                                                    </p>

                                                    {message.response && (
                                                        <div className="text-xs text-gray-500 mt-2">
                                                            <span className="text-gray-400">
                                                                –û—Ç–≤–µ—Ç:
                                                            </span>{" "}
                                                            {message.response.substring(
                                                                0,
                                                                60
                                                            )}
                                                            {message.response
                                                                .length > 60 &&
                                                                "..."}
                                                        </div>
                                                    )}
                                                </div>
                                            )
                                        )}
                                    </div>
                                )}
                            </div>

                            {/* –î–µ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è */}
                            <div className="lg:w-1/2 bg-gray-800/50 rounded-lg border border-gray-800 p-5">
                                {!currentMessage ? (
                                    <div className="flex flex-col items-center justify-center h-full py-8 text-gray-400">
                                        <svg
                                            className="w-16 h-16 mb-4 text-gray-700"
                                            fill="none"
                                            stroke="currentColor"
                                            viewBox="0 0 24 24"
                                            xmlns="http://www.w3.org/2000/svg"
                                        >
                                            <path
                                                strokeLinecap="round"
                                                strokeLinejoin="round"
                                                strokeWidth="1"
                                                d="M17 8h2a2 2 0 012 2v6a2 2 0 01-2 2h-2v4l-4-4H9a1.994 1.994 0 01-1.414-.586m0 0L11 14h4a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2v4l.586-.586z"
                                            ></path>
                                        </svg>
                                        <p className="text-center">
                                            –í–´–ë–ï–†–ò–¢–ï –°–û–û–ë–©–ï–ù–ò–ï –î–õ–Ø –ü–†–û–°–ú–û–¢–†–ê
                                        </p>
                                    </div>
                                ) : (
                                    <div>
                                        <div className="border-b border-gray-700 pb-4 mb-4">
                                            <div className="flex justify-between items-center mb-4">
                                                <h2 className="text-xl font-medieval text-red-400">
                                                    {currentMessage.name}
                                                </h2>
                                                <div className="flex gap-2">
                                                    <StatusBadge
                                                        status={
                                                            currentMessage.status
                                                        }
                                                    />
                                                    <ModerationBadge
                                                        message={currentMessage}
                                                        isArchiveMode={
                                                            isArchiveMode
                                                        }
                                                    />
                                                </div>
                                            </div>

                                            <div className="grid grid-cols-2 gap-4 text-sm mb-4">
                                                <div>
                                                    <span className="text-gray-500">
                                                        Email:
                                                    </span>
                                                    <span className="ml-2 text-gray-300">
                                                        {currentMessage.email}
                                                    </span>
                                                </div>
                                                <div>
                                                    <span className="text-gray-500">
                                                        –¢–∏–ø:
                                                    </span>
                                                    <span className="ml-2 text-gray-300">
                                                        <TypeBadge
                                                            type={
                                                                currentMessage.type
                                                            }
                                                        />
                                                    </span>
                                                </div>
                                                <div>
                                                    <span className="text-gray-500">
                                                        –î–∞—Ç–∞:
                                                    </span>
                                                    <span className="ml-2 text-gray-300">
                                                        {formatDate(
                                                            currentMessage.created_at
                                                        )}
                                                    </span>
                                                </div>
                                                {currentMessage.character_name && (
                                                    <div>
                                                        <span className="text-gray-500">
                                                            –ü–µ—Ä—Å–æ–Ω–∞–∂:
                                                        </span>
                                                        <span className="ml-2 text-gray-300">
                                                            {
                                                                currentMessage.character_name
                                                            }
                                                        </span>
                                                    </div>
                                                )}
                                                {currentMessage.responder_name && (
                                                    <div className="col-span-2">
                                                        <span className="text-gray-500">
                                                            –û—Ç–≤–µ—Ç–∏–ª:
                                                        </span>
                                                        <span className="ml-2 text-green-400">
                                                            {
                                                                currentMessage.responder_name
                                                            }
                                                        </span>
                                                    </div>
                                                )}
                                            </div>

                                            {/* –ö–Ω–æ–ø–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ */}
                                            <div className="border-t border-gray-700 py-3 mb-4">
                                                <div className="flex justify-between">
                                                    <div>
                                                        <h3 className="text-gray-400 text-sm font-medieval mb-2">
                                                            –ú–æ–¥–µ—Ä–∞—Ü–∏—è:
                                                        </h3>
                                                    </div>
                                                    <div className="space-x-2">
                                                        {/* –ö–Ω–æ–ø–∫–∞ –í–∑—è—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é */}
                                                        {!isArchiveMode &&
                                                            (!currentMessage.on_moderation ||
                                                                currentMessage.moderator_id ===
                                                                    authStore
                                                                        .user
                                                                        ?.id) && (
                                                                <button
                                                                    className={`bg-purple-900 hover:bg-purple-800 text-white py-1.5 px-3 rounded shadow text-sm ${
                                                                        takeForModerationMutation.isPending
                                                                            ? "opacity-70 cursor-not-allowed"
                                                                            : ""
                                                                    }`}
                                                                    onClick={
                                                                        takeMessage
                                                                    }
                                                                    disabled={
                                                                        takeForModerationMutation.isPending ||
                                                                        (currentMessage.on_moderation &&
                                                                            currentMessage.moderator_id ===
                                                                                authStore
                                                                                    .user
                                                                                    ?.id)
                                                                    }
                                                                >
                                                                    {takeForModerationMutation.isPending ? (
                                                                        <span className="flex items-center">
                                                                            <svg
                                                                                className="animate-spin -ml-1 mr-2 h-4 w-4 text-white"
                                                                                xmlns="http://www.w3.org/2000/svg"
                                                                                fill="none"
                                                                                viewBox="0 0 24 24"
                                                                            >
                                                                                <circle
                                                                                    className="opacity-25"
                                                                                    cx="12"
                                                                                    cy="12"
                                                                                    r="10"
                                                                                    stroke="currentColor"
                                                                                    strokeWidth="4"
                                                                                ></circle>
                                                                                <path
                                                                                    className="opacity-75"
                                                                                    fill="currentColor"
                                                                                    d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                                                                                ></path>
                                                                            </svg>
                                                                            –û–±—Ä–∞–±–æ—Ç–∫–∞...
                                                                        </span>
                                                                    ) : currentMessage.on_moderation &&
                                                                      currentMessage.moderator_id ===
                                                                          authStore
                                                                              .user
                                                                              ?.id ? (
                                                                        "–£–∂–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —É –≤–∞—Å"
                                                                    ) : (
                                                                        "–í–∑—è—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"
                                                                    )}
                                                                </button>
                                                            )}

                                                        {/* –ö–Ω–æ–ø–∫–∞ –û—Å–≤–æ–±–æ–¥–∏—Ç—å –æ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏ */}
                                                        {!isArchiveMode &&
                                                            currentMessage.moderator_id ===
                                                                authStore.user
                                                                    ?.id &&
                                                            currentMessage.on_moderation && (
                                                                <button
                                                                    className={`bg-red-800 hover:bg-red-700 text-white py-1.5 px-3 rounded shadow text-sm ${
                                                                        releaseFromModerationMutation.isPending
                                                                            ? "opacity-70 cursor-not-allowed"
                                                                            : ""
                                                                    }`}
                                                                    onClick={
                                                                        releaseMessage
                                                                    }
                                                                    disabled={
                                                                        releaseFromModerationMutation.isPending
                                                                    }
                                                                >
                                                                    {releaseFromModerationMutation.isPending ? (
                                                                        <span className="flex items-center">
                                                                            <svg
                                                                                className="animate-spin -ml-1 mr-2 h-4 w-4 text-white"
                                                                                xmlns="http://www.w3.org/2000/svg"
                                                                                fill="none"
                                                                                viewBox="0 0 24 24"
                                                                            >
                                                                                <circle
                                                                                    className="opacity-25"
                                                                                    cx="12"
                                                                                    cy="12"
                                                                                    r="10"
                                                                                    stroke="currentColor"
                                                                                    strokeWidth="4"
                                                                                ></circle>
                                                                                <path
                                                                                    className="opacity-75"
                                                                                    fill="currentColor"
                                                                                    d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                                                                                ></path>
                                                                            </svg>
                                                                            –û–±—Ä–∞–±–æ—Ç–∫–∞...
                                                                        </span>
                                                                    ) : (
                                                                        "–û—Å–≤–æ–±–æ–¥–∏—Ç—å"
                                                                    )}
                                                                </button>
                                                            )}
                                                    </div>
                                                </div>
                                            </div>

                                            <div className="bg-gray-900/70 p-4 rounded-lg border border-gray-800 mb-4">
                                                <h3 className="text-gray-400 mb-2 text-sm font-medieval">
                                                    –°–æ–æ–±—â–µ–Ω–∏–µ:
                                                </h3>
                                                <p className="text-gray-300 whitespace-pre-line">
                                                    {currentMessage.message}
                                                </p>
                                            </div>

                                            {/* –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –≤ –∞—Ä—Ö–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ */}
                                            {isArchiveMode &&
                                                currentMessage.rating !==
                                                    undefined && (
                                                    <RatingDisplay
                                                        rating={
                                                            currentMessage.rating
                                                        }
                                                        comment={
                                                            currentMessage.feedback_comment
                                                        }
                                                    />
                                                )}
                                        </div>

                                        {/* –°–∫—Ä—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ */}
                                        {!isArchiveMode && (
                                            <div>
                                                <h3 className="text-gray-300 mb-2 font-medieval">
                                                    –û—Ç–≤–µ—Ç:
                                                </h3>
                                                <textarea
                                                    className="w-full bg-gray-900/70 border border-gray-700 rounded-md p-3 text-gray-300 focus:outline-none focus:ring-2 focus:ring-red-900/50 focus:border-red-800/50 transition-all shadow-inner mb-4"
                                                    rows={5}
                                                    value={responseText}
                                                    onChange={(e) =>
                                                        setResponseText(
                                                            e.target.value
                                                        )
                                                    }
                                                    placeholder={
                                                        !currentMessage.on_moderation ||
                                                        currentMessage.moderator_id !==
                                                            authStore.user?.id
                                                            ? "–°–Ω–∞—á–∞–ª–∞ –≤–æ–∑—å–º–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é..."
                                                            : "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é..."
                                                    }
                                                    disabled={
                                                        updateResponseMutation.isPending ||
                                                        !currentMessage.on_moderation ||
                                                        currentMessage.moderator_id !==
                                                            authStore.user?.id
                                                    }
                                                />

                                                <div className="flex flex-wrap justify-between gap-3">
                                                    <div className="space-x-2">
                                                        <button
                                                            className={`bg-gray-800 hover:bg-gray-700 text-gray-300 py-2 px-4 rounded border border-gray-700 ${
                                                                currentMessage.status ===
                                                                    "new" ||
                                                                !currentMessage.on_moderation ||
                                                                currentMessage.moderator_id !==
                                                                    authStore
                                                                        .user
                                                                        ?.id
                                                                    ? "opacity-50 cursor-not-allowed"
                                                                    : ""
                                                            }`}
                                                            onClick={() =>
                                                                changeStatus(
                                                                    "new"
                                                                )
                                                            }
                                                            disabled={
                                                                currentMessage.status ===
                                                                    "new" ||
                                                                updateResponseMutation.isPending ||
                                                                !currentMessage.on_moderation ||
                                                                currentMessage.moderator_id !==
                                                                    authStore
                                                                        .user
                                                                        ?.id
                                                            }
                                                        >
                                                            –ü–û–ú–ï–¢–ò–¢–¨ –ö–ê–ö –ù–û–í–û–ï
                                                        </button>
                                                        <button
                                                            className={`bg-gray-800 hover:bg-gray-700 text-gray-300 py-2 px-4 rounded border border-gray-700 ${
                                                                currentMessage.status ===
                                                                    "in_progress" ||
                                                                !currentMessage.on_moderation ||
                                                                currentMessage.moderator_id !==
                                                                    authStore
                                                                        .user
                                                                        ?.id
                                                                    ? "opacity-50 cursor-not-allowed"
                                                                    : ""
                                                            }`}
                                                            onClick={() =>
                                                                changeStatus(
                                                                    "in_progress"
                                                                )
                                                            }
                                                            disabled={
                                                                currentMessage.status ===
                                                                    "in_progress" ||
                                                                updateResponseMutation.isPending ||
                                                                !currentMessage.on_moderation ||
                                                                currentMessage.moderator_id !==
                                                                    authStore
                                                                        .user
                                                                        ?.id
                                                            }
                                                        >
                                                            –í –û–ë–†–ê–ë–û–¢–ö–ï
                                                        </button>
                                                        <button
                                                            className={`bg-gray-800 hover:bg-gray-700 text-gray-300 py-2 px-4 rounded border border-gray-700 ${
                                                                currentMessage.status ===
                                                                    "closed" ||
                                                                !currentMessage.on_moderation ||
                                                                currentMessage.moderator_id !==
                                                                    authStore
                                                                        .user
                                                                        ?.id
                                                                    ? "opacity-50 cursor-not-allowed"
                                                                    : ""
                                                            }`}
                                                            onClick={() =>
                                                                changeStatus(
                                                                    "closed"
                                                                )
                                                            }
                                                            disabled={
                                                                currentMessage.status ===
                                                                    "closed" ||
                                                                updateResponseMutation.isPending ||
                                                                !currentMessage.on_moderation ||
                                                                currentMessage.moderator_id !==
                                                                    authStore
                                                                        .user
                                                                        ?.id
                                                            }
                                                        >
                                                            –ó–ê–ö–†–´–¢–¨
                                                        </button>
                                                    </div>

                                                    <button
                                                        className="bg-red-900 hover:bg-red-800 text-white py-2 px-6 rounded shadow flex items-center gap-2"
                                                        onClick={saveResponse}
                                                        disabled={
                                                            !responseText.trim() ||
                                                            updateResponseMutation.isPending ||
                                                            !currentMessage.on_moderation ||
                                                            currentMessage.moderator_id !==
                                                                authStore.user
                                                                    ?.id
                                                        }
                                                    >
                                                        {updateResponseMutation.isPending && (
                                                            <svg
                                                                className="animate-spin h-4 w-4 text-white"
                                                                xmlns="http://www.w3.org/2000/svg"
                                                                fill="none"
                                                                viewBox="0 0 24 24"
                                                            >
                                                                <circle
                                                                    className="opacity-25"
                                                                    cx="12"
                                                                    cy="12"
                                                                    r="10"
                                                                    stroke="currentColor"
                                                                    strokeWidth="4"
                                                                ></circle>
                                                                <path
                                                                    className="opacity-75"
                                                                    fill="currentColor"
                                                                    d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                                                                ></path>
                                                            </svg>
                                                        )}
                                                        –°–û–•–†–ê–ù–ò–¢–¨ –û–¢–í–ï–¢
                                                    </button>
                                                </div>
                                            </div>
                                        )}
                                    </div>
                                )}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </MainLayout>
    );
};

export default SupportMessages;
