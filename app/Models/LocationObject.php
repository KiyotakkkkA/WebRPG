<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class LocationObject extends Model
{
    use HasFactory;

    /**
     * –¢–∏–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤
     */
    const TYPE_BUILDING = 'building';   // –ó–¥–∞–Ω–∏–µ
    const TYPE_NPC = 'npc';             // NPC (–Ω–µ–∏–≥—Ä–æ–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂)
    const TYPE_MONSTER = 'monster';     // –ú–æ–Ω—Å—Ç—Ä
    const TYPE_RESOURCE = 'resource';   // –†–µ—Å—É—Ä—Å (—Ç—Ä–∞–≤—ã, —Ä—É–¥—ã –∏ —Ç.–¥.)

    /**
     * –ê—Ç—Ä–∏–±—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –º–∞—Å—Å–æ–≤–æ –Ω–∞–∑–Ω–∞—á–∞—Ç—å.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'location_id',
        'object_id',
        'type',
        'name',
        'description',
        'icon',
        'image_url',
        'x_position',
        'y_position',
        'is_active',
        'data',
    ];

    /**
     * –ê—Ç—Ä–∏–±—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ç–∏–ø–∞–º.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'data' => 'array',
        'is_active' => 'boolean',
        'x_position' => 'float',
        'y_position' => 'float',
    ];

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –æ–±—ä–µ–∫—Ç
     */
    public function location(): BelongsTo
    {
        return $this->belongsTo(Location::class);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç –∑–¥–∞–Ω–∏–µ–º
     */
    public function isBuilding(): bool
    {
        return $this->type === self::TYPE_BUILDING;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç NPC
     */
    public function isNpc(): bool
    {
        return $this->type === self::TYPE_NPC;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç –º–æ–Ω—Å—Ç—Ä–æ–º
     */
    public function isMonster(): bool
    {
        return $this->type === self::TYPE_MONSTER;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç —Ä–µ—Å—É—Ä—Å–æ–º
     */
    public function isResource(): bool
    {
        return $this->type === self::TYPE_RESOURCE;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
     */
    public function getDefaultIcon(): string
    {
        return match($this->type) {
            self::TYPE_BUILDING => 'üè†',
            self::TYPE_NPC => 'üë§',
            self::TYPE_MONSTER => 'üëπ',
            self::TYPE_RESOURCE => 'üíé',
            default => '‚ùì',
        };
    }
}
